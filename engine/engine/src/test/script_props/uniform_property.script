go.property("vec4", vmath.vector4(4, 5, 6, 7))

local function assert_exit(assert_that, error_string)
    if not assert_that then
        if error_string then
            print(error_string)
        end
        msg.post("@system:", "exit", { code = 1 })
        assert(assert_that)
    end
end

local function assert_vec4(v_test,v_correct)
    local v = v_test.x == v_correct.x and
        v_test.y == v_correct.y and
        v_test.z == v_correct.z and
        v_test.w == v_correct.w
    local e = v and nil or tostring(v_test) .. " and " .. tostring(v_correct) .. " are not the same!"
    assert_exit(v, e)
end

local function assert_error(func)
    local r, err = pcall(func)
    assert_exit(not r, err)
end

function init(self, config)
    -- Get First Array value, specified in the material
    assert_vec4(go.get("#sprite", "uniform_array", { index = 1 }), vmath.vector4(1,0,0,1))

    -- Get second array value, specified in the material
    assert_vec4(go.get("#sprite", "uniform_array", { index = 2 }), vmath.vector4(0,1,0,1))

    -- Test index out of bounds
    assert_error(function() go.get("#sprite", "uniform_array", { index = 0 }) end)
    assert_error(function() go.get("#sprite", "uniform_array", { index = 17 }) end)

    -- Test setting a value and then getting it
    local v_to_set = vmath.vector4(0, 0, 1, 1)
    go.set("#sprite", "uniform_array", v_to_set, { index = 16 })
    local v_from_prop = go.get("#sprite", "uniform_array", { index = 16 })
    assert_vec4(v_from_prop, v_to_set)

    msg.post("main:/main#script", "done")
end

