#! /usr/bin/env python

import waflib.Task, waflib.TaskGen, waflib.Options
import os, sys, glob, re
import waf_gamesys

def build(bld):
    defines = ['_XBOX'] #NOTE: _XBOX to get static lib and avoid dllimport/dllexport stuff
    if bld.env.PLATFORM in ('arm64-darwin', 'x86_64-ios'):
        defines = ['DM_NO_SYSTEM_FUNCTION'] # Needed because we wish to build the tests for all platforms, but not all platforms have the system() function

    additional_libs = []
    if bld.env['PLATFORM'] in ('armv7-android', 'arm64-android', 'x86_64-darwin'):
        additional_libs += ['UNWIND']

    graphics_lib = 'GRAPHICS_NULL'
    if bld.env['PLATFORM'] in ('arm64-android','armv7-android'):
        graphics_lib = 'GRAPHICS_NULL DMGLFW' # g_AndroidApp is currently in glfw

    resource_type_symbols = ['ResourceTypeGameObject', 'ResourceTypeCollection', 'ResourceTypeScript', 'ResourceTypeLua',
                             'ResourceTypeAnim', 'ResourceTypeAnimationSet', 'ResourceTypeGui', 'ResourceTypeGuiScript']
    component_type_symbols = ['ComponentTypeAnim', 'ComponentTypeScript', 'ComponentTypeGui']
    exported_symbols = ['ProfilerExt', 'GraphicsAdapterNull']

    bld.add_group()
    obj = bld.__call__(
        features = 'c cxx cprogram test',
        use = 'TESTMAIN RECORD CRASH VPX PROFILEREXT GAMEOBJECT DDF LIVEUPDATE GAMESYS RESOURCE DMGLFW GRAPHICS_NULL GRAPHICS_UTIL PHYSICS RENDER PLATFORM_SOCKET SCRIPT LUA EXTENSION HID_NULL INPUT PARTICLE RIG GUI SOUND_NULL DLIB CARES engine engine_service'.split() + additional_libs,
        exported_symbols = exported_symbols + resource_type_symbols + component_type_symbols,
        web_libs = ['library_sys.js', 'library_script.js'],
        includes = '../../proto .',
        defines = defines,
        source = 'test_engine.cpp',
        target = 'test_engine')

    # Psapi.lib is needed by ProfilerExt
    if 'win32' in bld.env.PLATFORM:
        obj.env.append_value('LINKFLAGS', ['Psapi.lib'])

    builtins_src = "content/builtins"
    builtins_dst = "src/test/builtins"

    platform = bld.env.PLATFORM
    if platform == 'win32':
        platform = 'x86-win32'

    bob_flags = []
    bob_flags.append("--platform=%s" % platform)
    if waflib.Options.options.use_vanilla_lua:
        bob_flags.append("--use-vanilla-lua")

    return

    # Build engine test content using bob
    # We always run distclean. Hook into waf clean/distclean in some way?
    bld.__call__(rule = 'java -jar content/bob-engine.jar --output ${SRC[0].parent.parent.parent.abspath()} -root ../src/test -k distclean build %s' % ' '.join(bob_flags),
                     source = 'wscript',
                     always = True)
