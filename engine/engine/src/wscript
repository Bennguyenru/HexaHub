#! /usr/bin/env python
import os, re

def set_options(opt):
    pass

def build(bld):
    obj = bld.new_task_gen(features = 'cxx cstaticlib ddf embed',
                          includes = '../proto . ..',
                          target = 'engine',
                          proto_gen_py = True,
                          protoc_includes = '../proto',
                          embed_source='../content/materials/debug.vpc ../content/materials/debug.fpc ../content/builtins.arc ../content/builtins/connect/connect.project',
                          source='engine.cpp engine_service.cpp physics_debug_render.cpp profile_render.cpp ../proto/engine_ddf.proto')
    bld.install_files('${PREFIX}/include/engine', 'engine.h')
    bld.install_files('${PREFIX}/share/proto', '../proto/engine_ddf.proto')

    additional_libs = []
    exported_symbols = ['DefaultSoundDevice', 'AudioDecoderWav']

    # Add stb_vorbis and/or tremolo depending on platform
    if 'js-web' in bld.env['PLATFORM'] or 'win32' in bld.env['PLATFORM']:
        exported_symbols.append('AudioDecoderStbVorbis')
    else:
        exported_symbols.append('AudioDecoderStbVorbis')
        exported_symbols.append('AudioDecoderTremolo')
        additional_libs.append('TREMOLO')

    mobile_service_symbols = ['IAPExt', 'PushExt', 'AdTruthExt']
    if  re.match('arm.*?darwin', bld.env['PLATFORM']):
        additional_libs.append('FACEBOOK')
        additional_libs.append('SQLLITE')
        exported_symbols.extend(mobile_service_symbols)
        exported_symbols.append('FacebookExt')

    if 'android' in bld.env['PLATFORM']:
        sound_lib = 'SOUND OPENAL_SOFT OPENSLES'
        exported_symbols.extend(mobile_service_symbols)
        exported_symbols.append('FacebookExt')
    elif 'js-web' in bld.env['PLATFORM']:
        sound_lib = 'SOUND OPENAL'
        exported_symbols.append('NullSoundDevice')
        exported_symbols.append('FacebookExt')
    else:
        sound_lib = 'SOUND OPENAL'

    additional_libs = ' '.join(additional_libs)

    dynamo_home = os.getenv('DYNAMO_HOME')

    activities=[('com.facebook.LoginActivity', ''), ('com.defold.iap.IapActivity', 'android:theme="@android:style/Theme.Translucent.NoTitleBar"')]
    extra_packages = 'com.facebook.android:com.google.android.gms'

    android_jar_paths = ['%s/ext/share/java/facebooksdk.jar' % (dynamo_home),
              '%s/ext/share/java/google-play-services.jar' % (dynamo_home),
              '%s/ext/share/java/android-support-v4.jar' % (dynamo_home),
              '%s/share/java/glfw_android.jar' % (dynamo_home),
              '%s/share/java/facebook_android.jar' % (dynamo_home),
              '%s/share/java/gamesys_android.jar' % (dynamo_home),
              '%s/share/java/iap_android.jar' % (dynamo_home),
              '%s/share/java/push_android.jar' % (dynamo_home),
              '%s/share/java/adtruth_android.jar' % (dynamo_home),
              '%s/share/java/sound2_android.jar' % (dynamo_home)]

    obj = bld.new_task_gen(
        features = 'cc cxx cprogram apk web',
        uselib = 'ADTRUTHEXT FACEBOOKEXT IAPEXT PUSHEXT RECORD VPX GAMEOBJECT DDF RESOURCE GAMESYS GRAPHICS GRAPHICS_UTIL PHYSICS RENDER PLATFORM_SOCKET SCRIPT LUA EXTENSION HID INPUT PARTICLE DLIB DMGLFW GUI %s X %s' % (sound_lib, additional_libs),
        uselib_local = 'engine',
        exported_symbols = exported_symbols,
        includes = '../build ../proto .',
        #NOTE: _XBOX to get static lib and avoid dllimport/dllexport stuff
        defines = '_XBOX',
        proto_gen_py = True,
        protoc_includes = '../proto',
        target = 'dmengine',
        bundleid = 'com.defold.engine',
        source=['main.cpp'],
        activities = activities,
        extra_packages = extra_packages,
        jars = android_jar_paths)

    if 'android' in bld.env['PLATFORM']:
        bld.install_files('${PREFIX}/share/java', 'dmengine.android/classes.dex')
        bld.install_files('${PREFIX}/bin/${PLATFORM}', 'dmengine.android/dmengine.apk')

    obj = bld.new_task_gen(
        features = 'cc cxx cprogram apk web',
        uselib = 'ADTRUTHEXT FACEBOOKEXT IAPEXT PUSHEXT RECORD VPX GAMEOBJECT DDF RESOURCE GAMESYS GRAPHICS GRAPHICS_UTIL PHYSICS RENDER PLATFORM_SOCKET SCRIPT LUA EXTENSION HID INPUT PARTICLE DLIB DMGLFW GUI %s X %s' % (sound_lib, additional_libs),
        uselib_local = 'engine',
        exported_symbols = exported_symbols,
        includes = '../build ../proto .',
        #NOTE: _XBOX to get static lib and avoid dllimport/dllexport stuff
        defines = '_XBOX DM_RELEASE=1',
        proto_gen_py = True,
        protoc_includes = '../proto',
        target = 'dmengine_release',
        source=['main.cpp'],
        activities = activities,
        extra_packages = extra_packages,
        jars = android_jar_paths)

    if bld.env.BUILD_PLATFORM == 'win32':
        obj.source.append('engine.rc')

    if 'android' in bld.env['PLATFORM']:
        bld.install_files('${PREFIX}/bin/${PLATFORM}', 'dmengine_release.android/dmengine_release.apk')

    obj = bld.new_task_gen(
        features = 'cc cxx cprogram apk web',
        uselib = 'RECORD VPX GAMEOBJECT DDF RESOURCE GAMESYS GRAPHICS_NULL GRAPHICS_UTIL PHYSICS RENDER PLATFORM_SOCKET SCRIPT LUA EXTENSION HID_NULL INPUT PARTICLE GUI SOUND_NULL DLIB DMGLFW X',
        uselib_local = 'engine',
        includes = '../build ../proto .',
        proto_gen_py = True,
        protoc_includes = '../proto',
        target = 'dmengine_headless',
        source='main.cpp')

    bld.new_task_gen(source = '../proto/engine_ddf.proto',
                     target = 'engine_doc.sdoc',
                     rule = '${SCRIPT_DOC} ${SRC} ${TGT}')

    bld.new_task_gen(source = '../proto/engine_ddf.proto',
                     target = 'engine_doc.json',
                     rule = '${SCRIPT_DOC} -t json ${SRC} ${TGT}')

    bld.install_files('${PREFIX}/share/doc', 'engine_doc.sdoc')
    bld.install_files('${PREFIX}/share/doc', 'engine_doc.json')

    bld.add_subdirs('test')

def configure(conf):
    pass
