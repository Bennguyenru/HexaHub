#! /usr/bin/env python

VERSION='0.1'
APPNAME='engine'

srcdir = '.'
blddir = 'build'

import os, sys, re, subprocess
import waf_ddf, waf_graphics, waf_dynamo, waf_gamesys, waf_physics, waf_render, waf_resource
from BuildUtility import BuildUtility, BuildUtilityException, create_build_utility

if sys.platform == "win32":
    os.environ["PYTHONPATH"] = os.environ["PYTHONPATH"] + ";default/proto"
else:
    os.environ["PYTHONPATH"] = os.environ["PYTHONPATH"] + ":default/proto"

def init():
    pass

def set_options(opt):
    opt.sub_options('src')
    opt.tool_options('waf_dynamo')
    opt.tool_options('waf_ddf')

def configure(conf):
    conf.check_tool('waf_dynamo')
    conf.check_tool('java')
    conf.check_tool('waf_resource')

    build_util = None
    try:
        build_util = create_build_utility(conf.env)
    except BuildUtilityException as ex:
        conf.fatal(ex.msg)

    engine_version = """
namespace dmEngineVersion
{
    static const char* VERSION = "%(version)s";
    static const char* VERSION_SHA1 = "%(sha1)s";
}
"""
    full = os.sep.join([conf.blddir, conf.env.variant(), 'engine_version.h'])
    try:
        os.mkdir(os.path.dirname(full))
    except:
        pass
    full = os.path.normpath(full)
    with open('../../VERSION', 'r') as f:
        version = f.readline().strip()
    sha1 = build_util.git_sha1()
    with open(full, 'w') as f:
        f.write(engine_version % {"version": version, "sha1": sha1})

    waf_graphics.configure(conf)
    waf_ddf.configure(conf)
    waf_physics.configure(conf)
    waf_render.configure(conf)
    waf_gamesys.configure(conf)

    conf.find_program('script_doc', var='SCRIPT_DOC', mandatory = True)

    conf.sub_config('src')

    operating_sys = build_util.get_target_os()
    architecture = build_util.get_target_architecture()

    sound_lib = 'sound2'
    if operating_sys == 'osx':
        conf.env.append_value('LINKFLAGS', ['-framework', 'Cocoa', '-framework', 'OpenGL', '-framework', 'OpenAL', '-framework', 'AGL', '-framework', 'IOKit', '-framework', 'Carbon', '-framework', 'CoreVideo'])
    elif operating_sys == 'ios':
        conf.env.append_value('LINKFLAGS', ['-framework', 'UIKit', '-framework', 'OpenGLES', '-framework', 'QuartzCore', '-framework', 'CoreGraphics', '-framework', 'OpenAL', '-framework', 'AudioToolbox'])
        # For Facebook SDK...
        conf.env.append_value('LINKFLAGS', ['-framework', 'Security', '-weak_framework', 'Accounts', '-weak_framework', 'Social', '-weak_framework', 'AdSupport'])
        # For IAP
        conf.env.append_value('LINKFLAGS', ['-framework', 'StoreKit'])
    elif operating_sys == 'android':
        conf.env.append_value('LINKFLAGS', ['-lEGL', '-lGLESv1_CM', '-lGLESv2', '-landroid'])
    elif operating_sys == "linux":
        conf.env['LIB_X'] = ['Xext', 'X11', 'Xi', 'GL', 'GLU']
    elif operating_sys == "win" and architecture == 'x86':
        conf.env.append_value('LINKFLAGS', ['opengl32.lib', 'user32.lib', 'shell32.lib', 'xinput.lib'])
    elif operating_sys == 'web' and architecture == 'js':
        pass

    conf.env['LIB_GTEST'] = 'gtest'

    conf.env['STATICLIB_DDF'] = 'ddf'
    conf.env['STATICLIB_DLIB'] = 'dlib'
    conf.env['STATICLIB_EXTENSION'] = 'extension'
    conf.env['STATICLIB_RESOURCE'] = 'resource'
    conf.env['STATICLIB_GRAPHICS'] = 'graphics'
    conf.env['STATICLIB_GRAPHICS_NULL'] = 'graphics_null'
    conf.env['STATICLIB_RENDER'] = 'render'
    conf.env['STATICLIB_GAMESYS'] = 'gamesys'
    conf.env['STATICLIB_GAMEOBJECT'] = 'gameobject'
    conf.env['STATICLIB_SCRIPT'] = 'script'
    conf.env['STATICLIB_DMGLFW'] = 'dmglfw'
    conf.env['STATICLIB_GUI'] = 'gui'
    conf.env['STATICLIB_PARTICLE'] = 'particle'
    conf.env['STATICLIB_SOUND'] = sound_lib
    conf.env['STATICLIB_SOUND_NULL'] = 'sound_null'
    conf.env['STATICLIB_OPENAL_SOFT'] = 'openal_soft'
    conf.env['LIB_OPENSLES'] = 'OpenSLES'
    conf.env['STATICLIB_HID'] = 'hid'
    conf.env['STATICLIB_HID_NULL'] = 'hid_null'
    conf.env['STATICLIB_INPUT'] = 'input'

    conf.env['STATICLIB_FACEBOOK'] = 'FacebookSDK'
    conf.env['LIB_SQLLITE'] = 'sqlite3'
    conf.env['STATICLIB_FACEBOOKEXT'] = 'facebookext'
    conf.env['STATICLIB_IAPEXT'] = 'iapext'
    conf.env['STATICLIB_PUSHEXT'] = 'pushext'
    conf.env['STATICLIB_ADTRUTHEXT'] = 'adtruthext'

    conf.env['STATICLIB_TREMOLO'] = 'tremolo'

    if operating_sys != 'ios' and operating_sys != 'android' and operating_sys != 'web':
        conf.env['STATICLIB_RECORD'] = 'record'
        conf.env['LIB_VPX'] = 'vpx'
    else:
        conf.env['STATICLIB_RECORD'] = 'record_null'
        conf.env['LIB_VPX'] = ''

    if operating_sys == "linux":
        conf.env['LIB_OPENAL'] = 'openal'
    elif operating_sys == "osx":
        pass
    elif operating_sys == "win" and architecture == "x86":
        conf.env['LIB_OPENAL'] = 'OpenAL32'
        conf.env.append_value('CPPPATH', build_util.get_dynamo_ext("include", "AL"))

    conf.env.append_unique('CCDEFINES', 'DLIB_LOG_DOMAIN="ENGINE"')
    conf.env.append_unique('CXXDEFINES', 'DLIB_LOG_DOMAIN="ENGINE"')

def build(bld):
    bld.add_subdirs('content')
    bld.add_group()
    bld.add_subdirs('src')

    bld.install_files('${PREFIX}/bin', 'scripts/dmengine_memprofile.sh', chmod=0755)

    build_util = None
    try:
        build_util = create_build_utility(bld.env)
    except BuildUtilityException as ex:
        conf.fatal(ex.msg)

    if build_util.get_target_os() == 'web' and build_util.get_target_architecture() == 'js':
        srcPath = os.path.join('build', 'default', 'src')
        builds = ['','_release', '_headless']
        for build in builds:
            filePath = os.path.join(srcPath, 'dmengine' + build + '.js.mem')
            if (os.path.exists(filePath)):
                bld.install_files('${PREFIX}/bin/js-web', filePath)

import Options
def shutdown():
    # unit tests disabled on win32 for now
    if sys.platform != "win32":
        waf_dynamo.run_gtests(valgrind = True)
