package dmRigDDF;

import "ddf/ddf_extensions.proto";
import "ddf/ddf_math.proto";

option java_package = "com.dynamo.rig.proto";
option java_outer_classname = "Rig";

message Bone
{
    option (struct_align) = true;

    // 0xffff means no parent
    required uint32 parent = 1;
    required uint64 id = 2;
    required dmMath.Point3 position = 3 [(field_align)=true];
    required dmMath.Quat rotation = 4 [(field_align)=true];
    required dmMath.Vector3 scale = 5 [(field_align)=true];
    optional bool inherit_scale = 6 [default = true];
    optional float length = 7;
}

message IK
{
    required uint64 id = 1;
    required uint32 parent = 2;
    required uint32 child = 3;
    required uint32 target = 4;
    optional bool positive = 5 [default = true];
    optional float mix = 6 [default = 1.0];
}

message Skeleton
{
    repeated Bone bones = 1;
    repeated IK iks = 2;

    // Spine 2.x specific feature.
    optional bool local_bone_scaling = 3 [default = false];
}

message AnimationTrack
{
    required uint32 bone_index = 1;
    // x0, y0, z0, ...
    repeated float positions = 2;
    // x0, x0, z0, w0, …
    repeated float rotations = 3;
    // x0, y0, z0, …
    repeated float scale = 4;
}

message IKAnimationTrack
{
    required uint32 ik_index = 1;
    repeated float mix = 2;
    repeated bool positive = 3;
}

message MeshAnimationTrack
{
    required uint32 mesh_index = 1;
    required uint64 mesh_id = 2;
    // draw-index = draw-index + order_offset
    repeated int32 order_offset = 3;
    // visibility
    repeated bool visible = 4;
    // r0, g0, b0, a0, …
    repeated float colors = 5;
}

message EventKey
{
    required float t = 1;
    optional int32 integer = 2 [default = 0];
    optional float float = 3 [default = 0.0];
    optional uint64 string = 4 [default = 0];
}

message EventTrack
{
    required uint64 event_id = 1;
    repeated EventKey keys = 2;
}

message RigAnimation
{
    required uint64 id = 1;
    required float duration = 2;
    required float sample_rate = 3;
    repeated AnimationTrack tracks = 4;
    repeated EventTrack event_tracks = 5;
    repeated MeshAnimationTrack mesh_tracks = 6;
    repeated IKAnimationTrack ik_tracks = 7;
}

message AnimationSet
{
    repeated RigAnimation animations = 1;
    repeated uint64 bone_list = 2;
}

message Mesh
{
    // NOTE: Positions, texcoord0, color and normals might be something
    // that should be moved to a more generic vertex message in the future
    // when adding support for mesh/models in dmRig.
    repeated float positions = 1;
    repeated float texcoord0 = 2;
    repeated float color     = 3; // single color value for the entire mesh
    repeated uint32 indices  = 4;
    // w00, w01, w02, w03, w10, … (only specified for skinned meshes)
    repeated float weights = 5;
    // i00, i01, i02, i03, i10, … (only specified for skinned meshes)
    repeated uint32 bone_indices = 6;
    optional bool visible = 7 [default = true];
    optional uint32 draw_order = 8;
    repeated float normals   = 9;
    repeated uint32 normals_indices = 10;
    repeated uint32 texcoord0_indices  = 11;
}

message MeshEntry
{
    required uint64 id = 1;
    repeated Mesh meshes = 2;
}

message MeshSet
{
    repeated MeshEntry mesh_entries = 1;

    // List of bone names that represent the order of the bone influences.
    // Not used for Spine rigs since they don't have support for external skeletons.
    repeated uint64 bone_list = 2;
}

message RigScene
{
    optional string skeleton = 1 [(resource)=true];
    optional string animation_set = 2 [(resource)=true];
    required string mesh_set = 3 [(resource)=true];
    optional string texture_set = 4 [(resource)=true];
}
