package dmGameSystemDDF;

import "ddf/ddf_extensions.proto";
import "ddf/ddf_math.proto";

option java_package = "com.dynamo.spine.proto";
option java_outer_classname = "Spine";

message SpineSceneDesc
{
    required string spine_json          = 1 [(resource)=true];
    required string atlas               = 2 [(resource)=true];
    optional float sample_rate          = 3 [default = 30.0];
}

message SpineModelDesc
{
    enum BlendMode
    {
        BLEND_MODE_ALPHA     = 0 [(displayName) = "Alpha"];
        BLEND_MODE_ADD       = 1 [(displayName) = "Add"];
        BLEND_MODE_MULT      = 3 [(displayName) = "Multiply"];
    }

    required string spine_scene         = 1 [(resource)=true];
    required string default_animation   = 2;
    required string skin                = 3;
    optional BlendMode blend_mode       = 4 [default = BLEND_MODE_ALPHA];
    optional string material            = 5 [(resource)=true, default="/builtins/materials/spine.material"];
}


message SpinePlayAnimation
{
    required uint64 animation_id = 1;
    // matches dmGameObject::Playback in gameobject.h
    required uint32 playback = 2;
    optional float blend_duration = 3 [default = 0.0];
    optional float offset = 4 [default = 0.0];
    optional float playback_rate = 5 [default = 1.0];
}

/*# Spine model API documentation
 *
 * @document
 * @name Spine
 * @namespace spine
 */

/*# reports the completion of a Spine animation
 * <p>
 * This message is sent when a Spine animation has finished playing back to the script
 * that started the animation. This message is sent only for animations that play with
 * the following playback modes and no message is sent if the animation is cancelled with
 * spine.cancel():
 * <ul>
 *  <li>go.PLAYBACK_ONCE_FORWARD</li>
 *  <li>go.PLAYBACK_ONCE_BACKWARD</li>
 *  <li>go.PLAYBACK_ONCE_PINGPONG</li>
 * </ul>
 * </p>
 *
 * @message
 * @name spine_animation_done
 * @param animation_id the id of the completed animation (hash)
 * @param playback the playback mode of the completed animation (constant)
 * @examples
 *
 * <pre>
 * function on_message(self, message_id, message, sender)
 *   if message_id == hash("spine_animation_done") then
 *     if message.animation_id == hash("run") and message.playback == go.PLAYBACK_ONCE_FORWARD then
 *       -- The animation "run" has finished running forward.
 *       ...
 *     end
 *   end
 * end
 * </pre>
 */
message SpineAnimationDone
{
    required uint64 animation_id = 1;
    // matches dmGameObject::Playback in gameobject.h
    required uint32 playback = 2;
}

message SpineCancelAnimation
{
}

/*# reports an incoming event from the Spine animation
 * <p>
 * This message is sent when Spine animation playback fires events. These events
 * has to be defined on the animation track in the Spine animation editor. An event
 * can contain custom values expressed in the fields "integer", "float" and "string".
 * </p>
 *
 * @message
 * @name spine_event
 * @param event_id the id of the event (hash)
 * @param animation_id the id of the animation (hash)
 * @param t the time of the event in seconds, relative to the start of the animation (number)
 * @param blend_weight the blend weight (between 0.0-1.0) of the current animation at time t (number)
 * @param integer user defined integer value for the event (number)
 * @param float user defined floating point value for the event (number)
 * @param string user defined string value for the event (hash)
 * @examples
 * <p>
 * The following example assumes that an animation sends event messages with the id "footstep"
 * and that the "integer" field is used to distinguish between left and right foot (values 0 and 1).
 * </p>
 * <pre>
 * function on_message(self, message_id, message, sender)
 *   if message_id == hash("spine_event") then
 *     -- Receiving animation event from Spine. Play footsteps.
 *     if message.event_id == hash("footstep") and message.integer == 0 then
 *       msg.post("#sound_footstep_right", "play_sound")
 *     elseif message.event_id == hash("footstep") and message.integer == 1 then
 *       msg.post("#sound_footstep_left", "play_sound")
 *   end
 * end
 * </pre>
 */
message SpineEvent
{
    required uint64 event_id = 1;
    required uint64 animation_id = 2;
    required float t = 3;
    required float blend_weight = 4;
    optional int32 integer = 5 [default = 0];
    optional float float = 6 [default = 0.0];
    optional uint64 string = 7 [default = 0];
}

/* Function wrapper documented in gamesys_script.cpp */
message SetConstantSpineModel
{
    required uint64         name_hash   = 1;
    required dmMath.Vector4 value       = 2;
}

/* Function wrapper documented in gamesys_script.cpp */
message ResetConstantSpineModel
{
    required uint64         name_hash   = 1;
}
