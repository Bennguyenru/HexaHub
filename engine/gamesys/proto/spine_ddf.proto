package dmGameSystemDDF;

import "ddf/ddf_extensions.proto";
import "ddf/ddf_math.proto";

option java_package = "com.dynamo.spine.proto";
option java_outer_classname = "Spine";

message SpineSceneDesc
{
    required string spine_json          = 1 [(resource)=true];
    required string atlas               = 2 [(resource)=true];
    optional float sample_rate          = 3 [default = 30.0];
}

message SpineModelDesc
{
    enum BlendMode
    {
        BLEND_MODE_ALPHA     = 0 [(displayName) = "Alpha"];
        BLEND_MODE_ADD       = 1 [(displayName) = "Add"];
        BLEND_MODE_MULT      = 3 [(displayName) = "Multiply"];
    }

    required string spine_scene         = 1 [(resource)=true];
    required string default_animation   = 2;
    required string skin                = 3;
    optional BlendMode blend_mode       = 4 [default = BLEND_MODE_ALPHA];
    optional string material            = 5 [(resource)=true, default="/builtins/materials/spine.material"];
}

message Bone
{
    // 0xffff means no parent
    required uint32 parent = 1;
    required uint64 id = 2;
    required dmMath.Point3 position = 3;
    required dmMath.Quat rotation = 4;
    required dmMath.Vector3 scale = 5;
    optional bool inherit_scale = 6 [default = true];
    optional float length = 7;
}

message IK
{
    required uint64 id = 1;
    required uint32 parent = 2;
    required uint32 child = 3;
    required uint32 target = 4;
    optional bool positive = 5 [default = true];
    optional float mix = 6 [default = 1.0];
}

message Skeleton
{
    repeated Bone bones = 1;
    repeated IK iks = 2;
}

message AnimationTrack
{
    required uint32 bone_index = 1;
    // x0, y0, z0, ...
    repeated float positions = 2;
    // x0, x0, z0, w0, …
    repeated float rotations = 3;
    // x0, y0, z0, …
    repeated float scale = 4;
}

message IKAnimationTrack
{
    required uint32 ik_index = 1;
    repeated float mix = 2;
    repeated bool positive = 3;
}

message MeshAnimationTrack
{
    required uint32 mesh_index = 1;
    required uint64 skin_id = 2;
    // draw-index = draw-index + order_offset
    repeated int32 order_offset = 3;
    // visibility
    repeated bool visible = 4;
    // r0, g0, b0, a0, …
    repeated float colors = 5;
}

message EventKey
{
    required float t = 1;
    optional int32 integer = 2 [default = 0];
    optional float float = 3 [default = 0.0];
    optional uint64 string = 4 [default = 0];
}

message EventTrack
{
    required uint64 event_id = 1;
    repeated EventKey keys = 2;
}

message SpineAnimation
{
    required uint64 id = 1;
    required float duration = 2;
    required float sample_rate = 3;
    repeated AnimationTrack tracks = 4;
    repeated EventTrack event_tracks = 5;
    repeated MeshAnimationTrack mesh_tracks = 6;
    repeated IKAnimationTrack ik_tracks = 7;
}

message AnimationSet
{
    repeated SpineAnimation animations = 1;
}

message Mesh
{
    repeated float positions = 1;
    repeated float texcoord0 = 2;
    repeated float color     = 3; // single color value for the entire mesh
    repeated uint32 indices  = 4;
    // w00, w01, w02, w03, w10, … (only specified for skinned meshes)
    repeated float weights = 5;
    // i00, i01, i02, i03, i10, … (only specified for skinned meshes)
    repeated uint32 bone_indices = 6;
    optional bool visible = 7 [default = true];
    optional uint32 draw_order = 8;
}

message MeshEntry
{
    required uint64 id = 1;
    repeated Mesh meshes = 2;
}

message MeshSet
{
    repeated MeshEntry mesh_entries = 1;
}

message SpineScene
{
    required Skeleton skeleton = 1;
    required AnimationSet animation_set = 2;
    required MeshSet mesh_set = 3;
    required string texture_set = 4 [(resource)=true];
}

message SpinePlayAnimation
{
    required uint64 animation_id = 1;
    // matches dmGameObject::Playback in gameobject.h
    required uint32 playback = 2;
    optional float blend_duration = 3 [default = 0.0];
}

/*# reports the completion of a Spine animation
 * <p>
 * This message is sent when a Spine animation has finished playing back to the script
 * that started the animation. This message is sent only for animations that play with
 * the following playback modes and no message is sent if the animation is cancelled with
 * spine.cancel():
 * <ul>
 *  <li>go.PLAYBACK_ONCE_FORWARD</li>
 *  <li>go.PLAYBACK_ONCE_BACKWARD</li>
 *  <li>go.PLAYBACK_ONCE_PINGPONG</li>
 * </ul>
 * </p>
 *
 * @message
 * @name spine_animation_done
 * @param animation_id the id of the completed animation (hash)
 * @param playback the playback mode of the completed animation (constant)
 * @examples
 *
 * <pre>
 * function on_message(self, message_id, message, sender)
 *   if message_id == hash("spine_animation_done") then
 *     if message.animation_id == hash("run") and message.playback == go.PLAYBACK_ONCE_FORWARD then
 *       -- The animation "run" has finished running forward.
 *       ...
 *     end
 *   end
 * end
 * </pre>
 */
message SpineAnimationDone
{
    required uint64 animation_id = 1;
    // matches dmGameObject::Playback in gameobject.h
    required uint32 playback = 2;
}

message SpineCancelAnimation
{
}

/*# reports an incoming event from the Spine animation
 * <p>
 * This message is sent when Spine animation playback fires events. These events
 * has to be defined on the animation track in the Spine animation editor. An event
 * can contain custom values expressed in the fields "integer", "float" and "string".
 * </p>
 *
 * @message
 * @name spine_event
 * @param event_id the id of the event (hash)
 * @param animation_id the id of the animation (hash)
 * @param t the time of the event in seconds, relative to the start of the animation (number)
 * @param blend_weight the blend weight (between 0.0-1.0) of the current animation at time t (number)
 * @param integer user defined integer value for the event (number)
 * @param float user defined floating point value for the event (number)
 * @param string user defined string value for the event (hash)
 * @examples
 * <p>
 * The following example assumes that an animation sends event messages with the id "footstep"
 * and that the "integer" field is used to distinguish between left and right foot (values 0 and 1).
 * </p>
 * <pre>
 * function on_message(self, message_id, message, sender)
 *   if message_id == hash("spine_event") then
 *     -- Receiving animation event from Spine. Play footsteps.
 *     if message.event_id == hash("footstep") and message.integer == 0 then
 *       msg.post("#sound_footstep_right", "play_sound")
 *     elseif message.event_id == hash("footstep") and message.integer == 1 then
 *       msg.post("#sound_footstep_left", "play_sound")
 *   end
 * end
 * </pre>
 */
message SpineEvent
{
    required uint64 event_id = 1;
    required uint64 animation_id = 2;
    required float t = 3;
    required float blend_weight = 4;
    optional int32 integer = 5 [default = 0];
    optional float float = 6 [default = 0.0];
    optional uint64 string = 7 [default = 0];
}
