package dmGuiDDF;

import "ddf/ddf_extensions.proto";
import "ddf/ddf_math.proto";

option java_package = "com.dynamo.gui.proto";
option java_outer_classname = "Gui";

message NodeDesc
{
    // NOTE: Enum values must correspond to the enum values in dmGui
    enum Type
    {
        TYPE_BOX  = 0 [(displayName) = "Box"];
        TYPE_TEXT = 1 [(displayName) = "Text"];
        TYPE_PIE  = 2 [(displayName) = "Pie"];
    }

    // NOTE: Enum values must correspond to the enum values in dmGui
    enum BlendMode
    {
        BLEND_MODE_ALPHA     = 0 [(displayName) = "Alpha"];
        BLEND_MODE_ADD       = 1 [(displayName) = "Add"];
        BLEND_MODE_ADD_ALPHA = 2 [(displayName) = "Add Alpha (Deprecated)"];
        BLEND_MODE_MULT      = 3 [(displayName) = "Multiply"];
    }

    // NOTE: Enum values must correspond to the enum values in dmGui
    enum ClippingMode
    {
        CLIPPING_MODE_NONE    = 0 [(displayName) = "None"];
        CLIPPING_MODE_STENCIL = 2 [(displayName) = "Stencil"];
    }

    // NOTE: Enum values must correspond to the enum values in dmGui
    enum XAnchor
    {
        XANCHOR_NONE  = 0 [(displayName) = "None"];
        XANCHOR_LEFT  = 1 [(displayName) = "Left"];
        XANCHOR_RIGHT = 2 [(displayName) = "Right"];
    };

    // NOTE: Enum values must correspond to the enum values in dmGui
    enum YAnchor
    {
        YANCHOR_NONE   = 0 [(displayName) = "None"];
        YANCHOR_TOP    = 1 [(displayName) = "Top"];
        YANCHOR_BOTTOM = 2 [(displayName) = "Bottom"];
    };

    enum Pivot
    {
        PIVOT_CENTER = 0 [(displayName) = "Center"];
        PIVOT_N      = 1 [(displayName) = "North"];
        PIVOT_NE     = 2 [(displayName) = "North East"];
        PIVOT_E      = 3 [(displayName) = "East"];
        PIVOT_SE     = 4 [(displayName) = "South East"];
        PIVOT_S      = 5 [(displayName) = "South"];
        PIVOT_SW     = 6 [(displayName) = "South West"];
        PIVOT_W      = 7 [(displayName) = "West"];
        PIVOT_NW     = 8 [(displayName) = "North West"];
    };

    enum AdjustMode
    {
        ADJUST_MODE_FIT = 0 [(displayName) = "Fit"];
        ADJUST_MODE_ZOOM = 1 [(displayName) = "Zoom"];
        ADJUST_MODE_STRETCH = 2 [(displayName) = "Stretch"];
    };

    enum PieBounds
    {
        PIEBOUNDS_RECTANGLE = 0 [(displayName) = "Rectangle"];
        PIEBOUNDS_ELLIPSE   = 1 [(displayName) = "Ellipse"];
    };

    required dmMath.Vector4 position = 1;
    required dmMath.Vector4 rotation = 2;
    required dmMath.Vector4 scale    = 3;
    required dmMath.Vector4 size     = 4;
    required dmMath.Vector4 color    = 5;
    required Type       type         = 6;
    optional BlendMode  blend_mode   = 7 [default = BLEND_MODE_ALPHA];
    optional string     text         = 8;
    optional string     texture      = 9;
    optional string     font         = 10;
    optional string     id           = 11;
    optional XAnchor    xanchor      = 12 [default = XANCHOR_NONE];
    optional YAnchor    yanchor      = 13 [default = YANCHOR_NONE];
    optional Pivot      pivot        = 14 [default = PIVOT_CENTER];
    optional dmMath.Vector4 outline  = 15;
    optional dmMath.Vector4 shadow   = 16;
    optional AdjustMode adjust_mode  = 17 [default = ADJUST_MODE_FIT];
    optional bool       line_break   = 18 [default = false];
    optional string     parent       = 19;
    optional string     layer        = 20;
    optional bool       inherit_alpha = 21 [default = false];
    optional dmMath.Vector4 slice9   = 22;

    // These are pie specific options
    optional PieBounds outerBounds   = 23 [default = PIEBOUNDS_ELLIPSE];
    optional float     innerRadius   = 24 [default = 0];
    optional int32     perimeterVertices = 25 [default = 32];
    optional float     pieFillAngle  = 26 [default = 360];

    optional ClippingMode clipping_mode  = 27 [default = CLIPPING_MODE_NONE];
    optional bool       clipping_visible = 28 [default = true];
    optional bool       clipping_inverted = 29 [default = false];
}

message SceneDesc
{
    message FontDesc
    {
        required string name    = 1;
        required string font    = 2 [(resource)=true];
    }
    message TextureDesc
    {
        required string name    = 1;
        required string texture = 2 [(resource)=true];
    }
    message LayerDesc
    {
        required string name    = 1;
    }

    required string      script                  = 1 [(resource)=true];
    repeated FontDesc    fonts                   = 2;
    repeated TextureDesc textures                = 3;
    optional dmMath.Vector4 background_color     = 4;

    repeated NodeDesc    nodes                   = 6;
    repeated LayerDesc   layers                  = 7;

    optional string      material                = 8 [(resource)=true, default="/builtins/materials/gui.material"];
}
