-- Copyright 2020-2022 The Defold Foundation
-- Copyright 2014-2020 King
-- Copyright 2009-2014 Ragnar Svensson, Christian Murray
-- Licensed under the Defold License version 1.0 (the "License"); you may not use
-- this file except in compliance with the License.
--
-- You may obtain a copy of the License, together with FAQs at
-- https://www.defold.com/license
--
-- Unless required by applicable law or agreed to in writing, software distributed
-- under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
-- CONDITIONS OF ANY KIND, either express or implied. See the License for the
-- specific language governing permissions and limitations under the License.

local function assert_anim(a, b)
    assert(a.id          == b.id)
    assert(a.width       == b.width)
    assert(a.height      == b.height)
    assert(a.frame_start == b.frame_start)
    assert(a.frame_end   == b.frame_end)
    assert(a.fps         == b.fps)
    assert(a.playback    == b.playback)
end

local function assert_near(exp, act)
    local epsilon = 0.000001
    assert(math.abs(exp - act) < epsilon)
end

local function assert_geo(a, b)
    assert(#a.vertices == #b.vertices)
    assert(#a.uvs      == #b.uvs)
    assert(#a.indices  == #b.indices)
    for k,v in pairs(a.vertices) do
        assert_near(v, b.vertices[k])
    end
    for k,v in pairs(a.uvs) do
        assert_near(v, b.uvs[k])
    end
    for k,v in pairs(a.indices) do
        assert_near(v, b.indices[k])
    end
end

local function test_simple(self)
    local data = resource.get_atlas(self.valid_tileset_path)

    assert(data.texture)
    assert(data.geometries)
    assert(data.animations)

    assert(data.texture == self.valid_texture_path)

    assert_anim(data.animations[1], {
        id          = "anim",
        width       = 16,
        height      = 16,
        frame_start = 1,
        frame_end   = 2,
        fps         = 30,
        playback    = go.PLAYBACK_ONCE_FORWARD
    })

    resource.set_atlas(self.valid_tileset_path, data)
end

local function make_anim(id, width, height, fstart, fend)
    return {
        id=id,
        width=width,
        height=height,
        frame_start=fstart,
        frame_end=fend
    }
end

local function make_quad(w, h, x, y)
    return {
        vertices = {0, 0,
                    0, h,
                    w, h,
                    w, 0},
        uvs      = {x    , y,
                    x    , y + h,
                    x + w, x + h,
                    x + w, y},
        indices  = {0,1,2,0,2,3}
    }
end

local function test_setting_valid(self)
    local animations = {
        {
            id          = "anim_1",
            width       = 4,
            height      = 4,
            frame_start = 1,
            frame_end   = 2,
            fps         = 15,
            playback    = go.PLAYBACK_LOOP_PINGPONG
        },
        {
            id          = "anim_2",
            width       = 16,
            height      = 16,
            frame_start = 2,
            frame_end   = 3,
            fps         = 2,
            playback    = go.PLAYBACK_NONE
        },
    }
    local geometries = {
        make_quad(16, 16, 0, 0),
        make_quad(16, 16, 16, 0)
    }
    resource.set_atlas(self.valid_tileset_path, {
        texture = self.valid_texture_path,
        geometries = geometries,
        animations = animations
    })

    local data = resource.get_atlas(self.valid_tileset_path)
    for k,v in pairs(data.animations) do
        assert_anim(v, animations[k])
    end
    for k,v in pairs(data.geometries) do
        assert_geo(v, geometries[k])
    end
end

-- helper function for general tests in init() function
-- does a pcall and verify that it fails
local function assert_error(func)
    local r, err = pcall(func)
    if not r then
        print(err)
    end
    assert(not r)
end

local function test_fail_all(self)
    -- test get wrong path
    assert_error(function() resource.get_atlas("/missing-path") end)
    -- test set wrong path
    assert_error(function() resource.set_atlas("/missing-path", {}) end)
    -- test set wrong texture path
    assert_error(function() resource.set_atlas(self.valid_tileset_path, {
        texture = "wrong-path", animations = {}, geometries = {}}) end)
    -- test set missing fields in animation
    assert_error(function() resource.set_atlas(self.valid_tileset_path, {
        texture = self.valid_texture_path, animations = {{}}, geometries = {}}) end)
    -- test set missing fields in geometry
    assert_error(function() resource.set_atlas(self.valid_tileset_path, {
        texture = self.valid_texture_path, animations = {}, geometries = {{}}}) end)
    -- test specifying animations but no geometry
    assert_error(function() resource.set_atlas(self.valid_tileset_path, {
        texture = self.valid_texture_path, animations = {make_anim("test", 1, 1, 1, 2)}, geometries = {}}) end)
    -- test specifying incorrect animation start/end
    assert_error(function() resource.set_atlas(self.valid_tileset_path, {
        texture = self.valid_texture_path, animations = {make_anim("test", 1, 1, 0, 0)}, geometries = {make_quad(1,1,1,1)}}) end)
    -- test uneven components in data array
    assert_error(function() resource.set_atlas(self.valid_tileset_path, {
        texture = self.valid_texture_path, animations = {}, geometries = { {vertices = {1}, uvs = {}, indices = {}} }}) end)
end

function init(self)
    self.update_counter = 0
    self.valid_tileset_path = "/tile/valid.t.texturesetc"
    self.valid_texture_path = "/tile/mario_tileset.texturec"

    test_simple(self)
    test_setting_valid(self)
    test_fail_all(self)
end

