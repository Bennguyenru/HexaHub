-- Copyright 2020-2023 The Defold Foundation
-- Copyright 2014-2020 King
-- Copyright 2009-2014 Ragnar Svensson, Christian Murray
-- Licensed under the Defold License version 1.0 (the "License"); you may not use
-- this file except in compliance with the License.
-- 
-- You may obtain a copy of the License, together with FAQs at
-- https://www.defold.com/license
-- 
-- Unless required by applicable law or agreed to in writing, software distributed
-- under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
-- CONDITIONS OF ANY KIND, either express or implied. See the License for the
-- specific language governing permissions and limitations under the License.

local function assert_error(func)
    local r, err = pcall(func)
    if not r then
        print(err)
    end
    assert(not r)
end

function init(self)
	self.update_counter = 0
end

local tparams = {
	width          = 128,
	height         = 128,
	type           = resource.TEXTURE_TYPE_2D,
	format         = resource.TEXTURE_FORMAT_RGBA,
}

local args_compressed = {
	type             = resource.TEXTURE_TYPE_2D,
	width            = 32,
	height           = 32,
	format           = resource.TEXTURE_FORMAT_RGB_ETC1,
	compression_type = resource.COMPRESSION_TYPE_BASIS_UASTC,
}

function test_simple()
	local t_id = resource.create_texture("/test_simple.texturec", tparams)
	go.set("#model", "texture0", t_id)
end

function test_with_buffer()
	local tex_buffer = buffer.create(tparams.width * tparams.height, {{name = hash("data"), type = buffer.VALUE_TYPE_UINT8, count = 4 }})
	local t_id = resource.create_texture("/test_with_buffer.texturec", tparams, tex_buffer)
	go.set("#model", "texture0", t_id)
end

function test_release()
	resource.release("/test_simple.texturec")
	resource.release("/test_simple.texturec")
end

function test_wrong_ext()
	assert_error(function()
		resource.create_texture("no_ext", tparams)
	end)
end

function test_already_exist()
	assert_error(function()
		resource.create_texture("/test_exists.texturec", tparams)
		resource.create_texture("/test_exists.texturec", tparams)
	end)
end

function test_release_not_found()
	assert_error(function()
		resource.release("/not_found")
	end)
end

function test_compressed()
	local f     = io.open("src/gamesys/test/resource/blank.basis", "rb")
    local c     = f:read("*all")
    local fsize = f:seek("end")
    f:close()

    local tex_buffer = buffer.create(fsize, {{name = hash("data"), type = buffer.VALUE_TYPE_UINT8, count = 1 }})
	local stream     = buffer.get_stream(tex_buffer, hash("data"))

	for i=1, fsize do
		stream[i] = c:byte(i)
	end

    resource.create_texture("/test_compressed.texturec", args_compressed, tex_buffer)
end

function test_compressed_fail()
	-- Note: res_texture won't yield an error here, we need to check the result of this operation on the C side
	local tex_buffer = buffer.create(128, {{name = hash("data"), type = buffer.VALUE_TYPE_UINT8, count = 1 }})
	resource.create_texture("/test_compressed_fail.texturec", args_compressed, tex_buffer)
end

function update(self)
	self.update_counter = self.update_counter + 1

	local tests = {
		test_simple,
		test_release,
		test_wrong_ext,
		test_already_exist,
		test_release_not_found,
		test_compressed,
		test_compressed_fail,
	}

	tests[self.update_counter]()
end
