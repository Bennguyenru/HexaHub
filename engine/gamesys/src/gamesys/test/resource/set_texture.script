-- Copyright 2020-2022 The Defold Foundation
-- Copyright 2014-2020 King
-- Copyright 2009-2014 Ragnar Svensson, Christian Murray
-- Licensed under the Defold License version 1.0 (the "License"); you may not use
-- this file except in compliance with the License.
--
-- You may obtain a copy of the License, together with FAQs at
-- https://www.defold.com/license
--
-- Unless required by applicable law or agreed to in writing, software distributed
-- under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
-- CONDITIONS OF ANY KIND, either express or implied. See the License for the
-- specific language governing permissions and limitations under the License.

function init(self)
	self.update_counter = 0
end

-- tile_set of sprite is 84 x 67
local function test_success_simple(self)
	local x             = 16
	local y             = 16
	local height        = 32
	local width         = 32
	local buf           = buffer.create(width * height, { {name=hash("rgb"), type=buffer.VALUE_TYPE_UINT8, count=3} } )
	local resource_path = go.get("#sprite", "texture0")
	local header = {
		width        = width,
		height       = height,
		type         = resource.TEXTURE_TYPE_2D,
		format       = resource.TEXTURE_FORMAT_RGB,
		x            = x,
		y            = y,
	}
	resource.set_texture(resource_path, header, buf)
end

local function test_success_resize(self)
	local height        = 256
	local width         = 256
	local buf           = buffer.create(width * height, { {name=hash("rgb"), type=buffer.VALUE_TYPE_UINT8, count=3} } )
	local resource_path = go.get("#sprite", "texture0")
	local header = {
		width        = width,
		height       = height,
		type         = resource.TEXTURE_TYPE_2D,
		format       = resource.TEXTURE_FORMAT_RGB,
	}
	resource.set_texture(resource_path, header, buf)
end

local function test_fail_out_of_bounds(self)
	local x             = 256
	local y             = 256
	local height        = 32
	local width         = 32
	local buf           = buffer.create(width * height, { {name=hash("rgb"), type=buffer.VALUE_TYPE_UINT8, count=3} } )
	local resource_path = go.get("#sprite", "texture0")
	local header = {
		width        = width,
		height       = height,
		type         = resource.TEXTURE_TYPE_2D,
		format       = resource.TEXTURE_FORMAT_RGB,
		x            = x,
		y            = y,
	}
	resource.set_texture(resource_path, header, buf)
end

local function test_fail_wrong_mipmap(self)
	local height        = 1
	local width         = 1
	local buf           = buffer.create(width * height, { {name=hash("rgb"), type=buffer.VALUE_TYPE_UINT8, count=3} } )
	local resource_path = go.get("#sprite", "texture0")
	local header = {
		width        = width,
		height       = height,
		type         = resource.TEXTURE_TYPE_2D,
		format       = resource.TEXTURE_FORMAT_RGB,
		mipmap       = 128,
	}
	resource.set_texture(resource_path, header, buf)
end

function update(self, dt)
	if self.update_counter == 0 then
		test_success_simple(self)
	elseif self.update_counter == 1 then
		test_success_resize(self)
	elseif self.update_counter == 2 then
		test_fail_out_of_bounds(self)
	elseif self.update_counter == 2 then
		test_fail_wrong_mipmap(self)
	end

	self.update_counter = self.update_counter + 1
end
