-- Copyright 2020-2022 The Defold Foundation
-- Copyright 2014-2020 King
-- Copyright 2009-2014 Ragnar Svensson, Christian Murray
-- Licensed under the Defold License version 1.0 (the "License"); you may not use
-- this file except in compliance with the License.
--
-- You may obtain a copy of the License, together with FAQs at
-- https://www.defold.com/license
--
-- Unless required by applicable law or agreed to in writing, software distributed
-- under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
-- CONDITIONS OF ANY KIND, either express or implied. See the License for the
-- specific language governing permissions and limitations under the License.

-- helper function for general tests in init() function
-- does a pcall and verify that it fails
local function assert_error(func)
    local r, err = pcall(func)
    if not r then
        print(err)
    end
    assert(not r)
end

local data_stream_desc = {{
    name  = hash("data"),
    type  = buffer.VALUE_TYPE_FLOAT32,
    count = 3
}}

function test_create_get(self)
    local buffer_id     = buffer.create(3, data_stream_desc)
    local res_buffer    = resource.create_buffer("/my_buffer.bufferc", { buffer = buffer_id }) -- ref = 1
    local res_buffer_id = resource.get_buffer(res_buffer) -- ref = 2

    -- at this point the buffer_id has been transferred to the resource so it's not usable any more
    assert_error(function() buffer.get_bytes(buffer_id, hash("data")) end)

    resource.release(res_buffer)
    resource.release(res_buffer)

    -- resource should be removed now
    assert_error(function() resource.get_buffer(res_buffer) end)
end

function test_create_ownership(self)
    local buffer_id  = buffer.create(3, data_stream_desc)
    local res_buffer = resource.create_buffer("/my_buffer.bufferc", { buffer = buffer_id, transfer_ownership=false })

    -- gc buffer, which should release the pointer that the resource has a ref to as well
    buffer_id = nil
    collectgarbage("collect")

    -- the resource buffer is no longer valid!
    assert_error(function() resource.get_buffer(res_buffer) end)

    resource.release(res_buffer)
end

function test_create_ownership_data(self)
    local buffer_id = buffer.create(3, data_stream_desc)

    -- create buffer resource and fill with data
    local res_buffer = resource.create_buffer("/my_buffer.bufferc", { buffer = buffer_id, transfer_ownership=false })
    local res_buffer_id = resource.get_buffer(res_buffer)
    local res_buffer_stream = buffer.get_stream(res_buffer_id, hash("data"))

    res_buffer_stream[1] = 3
    res_buffer_stream[2] = 2
    res_buffer_stream[3] = 1

    local buffer_stream = buffer.get_stream(buffer_id, hash("data"))
    for i=1,3 do
        assert(buffer_stream[i] == res_buffer_stream[i])
    end
end

function init(self)
    test_create_get(self)
    test_create_ownership(self)
    test_create_ownership_data(self)
end
