#! /usr/bin/env python
import os
import re
import sys

def configure(conf):
    conf.sub_config('test')

def build(bld):
    resource = bld.new_task_gen(features = 'cxx cstaticlib ddf embed',
        includes = '. ../../proto',
        proto_gen_py = True,
        protoc_includes = '../../proto',
        target = 'gamesys',
        embed_source='../../content/materials/gui.vpc ../../content/materials/gui.fpc')

    resource.find_sources_in_dirs(['.', 'resources', 'components', 'scripts', '../../proto'])

    if re.match('arm.*?darwin', bld.env.PLATFORM):
        resource.source += ['scripts/window/script_window_ios.mm']
    elif re.match('.*?android', bld.env.PLATFORM):
        resource.source += ['scripts/window/script_window_android.cpp']
    else:
        resource.source += ['scripts/window/script_window_null.cpp']

    bld.add_group()

    sources = [
        ('camera', ('../../proto/camera_ddf.proto')),
        ('collection_factory', ('scripts/script_collection_factory.cpp')),
        ('collection_proxy', ('components/comp_collection_proxy.cpp')),
        ('collision_object', ('../../proto/physics_ddf.proto', 'scripts/script_physics.cpp')),
        ('factory', ('scripts/script_factory.cpp')),
        ('label', ('../../proto/label_ddf.proto', 'scripts/script_label.cpp')),
        ('model', ('../../proto/model_ddf.proto', 'scripts/script_model.cpp')),
        ('particlefx', ('scripts/script_particlefx.cpp')),
        ('resource', ('scripts/script_resource.cpp')),
        ('sound', ('components/comp_sound.cpp', 'scripts/script_sound.cpp')),
        ('spine', ('../../proto/spine_ddf.proto', 'scripts/script_spine_model.cpp')),
        ('sprite', ('../../proto/sprite_ddf.proto', 'scripts/script_sprite.cpp')),
        ('tilemap', ('../../proto/tile_ddf.proto', 'scripts/script_tilemap.cpp')),
        ('window', ('scripts/script_window.cpp'))
    ]

    for d, source in sources:
        bld.new_task_gen(source = source,
                         target = '%s_doc.sdoc' % d,
                         rule = '${SCRIPT_DOC} ${SRC} ${TGT}')
        bld.new_task_gen(source = source,
                         target = '%s_doc.json' % d,
                         rule = '${SCRIPT_DOC} -t json ${SRC} ${TGT}')
        bld.install_files('${PREFIX}/share/doc', '%s_doc.sdoc' % d)
        bld.install_files('${PREFIX}/share/doc', '%s_doc.json' % d)

    bld.add_group()
    bld.add_subdirs('test')

    bld.install_files('${PREFIX}/include/gamesys', 'gamesys.h')
    bld.install_files('${PREFIX}/share/proto', '../../proto/physics_ddf.proto')
    bld.install_files('${PREFIX}/share/proto', '../../proto/gui_ddf.proto')
    bld.install_files('${PREFIX}/share/proto', '../../proto/gamesys_ddf.proto')
    bld.install_files('${PREFIX}/share/proto', '../../proto/model_ddf.proto')
    bld.install_files('${PREFIX}/share/proto', '../../proto/sprite_ddf.proto')
    bld.install_files('${PREFIX}/share/proto', '../../proto/spine_ddf.proto')
    bld.install_files('${PREFIX}/share/proto', '../../proto/label_ddf.proto')
