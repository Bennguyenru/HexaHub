#! /usr/bin/env python
import os

def configure(conf):
    pass

def build(bld):
    script = bld.new_task_gen(features = 'cxx cc cstaticlib',
                          includes = '. script',
                          proto_gen_cc = False,
                          proto_gen_py = True,
                          protoc_includes = '. script',
                          target = 'script')

    script.find_sources_in_dirs(['script', '.'])

    if bld.env.PLATFORM == 'js-web':
        script.source.remove(os.path.join('.','script_http.cpp'))
    else:
        script.source.remove(os.path.join('.', 'script_http_js.cpp'))

    # luasocket
    script.find_sources_in_dirs('luasocket')
    script.source.remove(os.path.join('luasocket', 'mime.c'))
    script.source.remove(os.path.join('luasocket', 'serial.c'))
    script.source.remove(os.path.join('luasocket', 'unix.c'))
    script.cflags = ['-DLUASOCKET_API=']
    if bld.env.PLATFORM == 'win32':
        script.source.remove(os.path.join('luasocket', 'usocket.c'))
    else:
        script.source.remove(os.path.join('luasocket', 'wsocket.c'))

    # must not enable bytecode when building with --use-vanilla-lua
    if bld.env.LUA_BYTECODE_ENABLE == 'yes':
        script.cxxflags = ['-DLUA_BYTECODE_ENABLE']

    # We must manually install script_doc_ddf_pb2.py as intall_path is None above
    # in order to avoid installation of dummylib
    bld.install_files('${PREFIX}/lib/python', 'script/script_doc_ddf_pb2.py')

    bld.add_group()

    for d, source in [('builtins', ('script_hash.cpp script.cpp')),
                      ('sys', ('script_sys.cpp')),
                      ('msg', ('script_msg.cpp')),
                      ('json', ('script_json.cpp')),
                      ('http', ('script_http.cpp')),
                      ('vmath', ('script_vmath.cpp')),
                      ('zlib', ('script_zlib.cpp')),
                      ('image', ('script_image.cpp'))]:
        bld.new_task_gen(source = source,
                         target = '%s_doc.sdoc' % d,
                         rule = '${SCRIPT_DOC} ${SRC} ${TGT}')
        bld.new_task_gen(source = source,
                         target = '%s_doc.json' % d,
                         rule = '${SCRIPT_DOC} -t json ${SRC} ${TGT}')

        bld.install_files('${PREFIX}/share/doc', '%s_doc.sdoc' % d)
        bld.install_files('${PREFIX}/share/doc', '%s_doc.json' % d)

    bld.install_files('${PREFIX}/bin', 'script_doc', chmod=493)
    bld.install_files('${PREFIX}/bin', 'script_doc.bat')
    bld.install_files('${PREFIX}/lib/python', 'script_doc.py')
    bld.install_files('${PREFIX}/include/script', 'script.h')

    # for #imports to work for other projects
    # ..first for python
    ddf_ext = bld.new_task_gen(
         rule   = 'echo "" > ${TGT}',
         source = 'script/lua_source_ddf.proto',
         target = '__init__.py',
         shell = True)

    bld.install_files('${PREFIX}/share/script', 'script/lua_source_ddf.proto')
    bld.install_files('${PREFIX}/lib/python/script', '__init__.py')


    if bld.env.PLATFORM == 'js-web':
        bld.install_files('${PREFIX}/lib/js-web/js', '../lib/js/library_script.js', postpone = False)

    bld.add_subdirs('test')
