#! /usr/bin/env python

VERSION = '0.1'
APPNAME = 'dlib'

srcdir = '.'
blddir = 'build'

import Options
import os, sys, waf_dynamo
from BuildUtility import BuildUtility, BuildUtilityException, create_build_utility

def init():
    pass

def set_options(opt):
    opt.tool_options('waf_dynamo')
    opt.sub_options('src')

def configure(conf):
    conf.check_tool('waf_dynamo')
    conf.sub_config('src')

    conf.check_tool('java')

    build_util = None
    try:
        build_util = create_build_utility(conf.env)
    except BuildUtilityException as ex:
        conf.fatal(ex.msg)

    if 'win' == build_util.get_target_os() and 'x86' == build_util.get_target_architecture():
        conf.env.append_value('CPPPATH', "../include/win32")

    conf.env.append_value('CPPPATH', build_util.get_dynamo_ext('include'))
    conf.env.append_value('LIBPATH', build_util.get_dynamo_ext('lib', build_util.get_target_platform()))

    conf.env['LIB_GTEST'] = 'gtest'

    conf.env.append_unique('CCDEFINES', 'DLIB_LOG_DOMAIN="DLIB"')
    conf.env.append_unique('CXXDEFINES', 'DLIB_LOG_DOMAIN="DLIB"')

    if build_util.get_target_os() == 'web' and build_util.get_target_architecture() == 'js':
        conf.env.append_unique('CCDEFINES', 'WEBP_FORCE_ALIGNED"')

def build(bld):
    if not os.path.exists('tmp'):
        os.mkdir('tmp')

    bld.add_subdirs('src')
    bld.install_files('${PREFIX}/include/win32', 'include/win32/*.h')

def shutdown():
    if not Options.commands['build'] or getattr(Options.options, 'skip_tests', False):
        return

    # TODO: Fix support for win32
    from Logs import warn, error
    import urllib2, time, atexit

    if sys.platform != 'win32':
        os.system('scripts/start_proxy_server.sh')
        os.system('scripts/start_http_server.sh')
        atexit.register(os.system, 'scripts/stop_http_server.sh')
        atexit.register(os.system, 'scripts/stop_proxy_server.sh')

        start = time.time()
        while True:
            if time.time() - start > 5:
                error('HTTP server failed to start within 5 seconds')
                sys.exit(1)
            try:
                urllib2.urlopen('http://localhost:7000')
                break
            except urllib2.URLError:
                print('Waiting for HTTP testserver to start...')
                sys.stdout.flush()
                time.sleep(0.5)
    else:
        warn('HTTP tests not supported on Win32 yet')

    waf_dynamo.run_gtests(valgrind = True)

    if sys.platform != 'win32':
        import subprocess
        proc = subprocess.Popen('./scripts/run_test_memprofile.sh', shell = True)
        ret = proc.wait()
        if ret != 0:
            print("test failed test_memprofile")
            sys.exit(ret)
