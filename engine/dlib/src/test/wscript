#! /usr/bin/env python
import os

def create_test(bld, name, extra_libs = None, extra_features = None, embed_source = None,
                extra_includes = None):
    req_libs = ['GTEST', 'UUID']
    req_features = ['cxx', 'cprogram', 'test']
    req_includes = ['../../src']
    req_embed = None

    if extra_features != None:
        req_features.extend(extra_features)
    if extra_libs != None:
        req_libs.extend(extra_libs)

    if embed_source != None:
        req_embed = embed_source
    if extra_includes != None:
        req_includes.extend(extra_includes)

    task_args = {
        'features': ' '.join(req_features),
        'source': name + '.cpp',
        'uselib': ' '.join(req_libs),
        'uselib_local': 'dlib',
        'includes': req_includes,
        'target': name
    }
    if req_embed != None:
        task_args['embed_source'] = ' '.join(req_embed)

    test = bld.new_task_gen(**task_args)
    test.install_path = None

def build(bld):

    bld.new_task_gen(features='javac seq',
                     classpath='../ext/jetty-all-7.0.2.v20100331.jar' + os.pathsep + '../ext/servlet-api-2.5.jar',
                     source_root='http_server')

    bld.env["JAVACFLAGS"] = '-g -source 1.6 -target 1.6'.split()


    bld.new_task_gen(rule = 'echo generated data > ${TGT}',
                     target = 'generated.embed')

    bld.add_group()

    create_test(bld, 'test_json', extra_features = ['embed'], extra_libs = ['THREAD'],
                embed_source = ['data/flickr.json'], extra_includes = ['.'])
