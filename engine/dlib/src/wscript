#! /usr/bin/env python

import os, re

def set_options(opt):
    pass

def build(bld):
    bld.add_subdirs('test')
    bld.add_subdirs('examples')
    bld.install_files('${PREFIX}/include/dlib', 'dlib/align.h')
    bld.install_files('${PREFIX}/include/dlib', 'dlib/array.h')
    bld.install_files('${PREFIX}/include/dlib', 'dlib/atomic.h')
    bld.install_files('${PREFIX}/include/dlib', 'dlib/configfile.h')
    bld.install_files('${PREFIX}/include/dlib', 'dlib/condition_variable.h')
    bld.install_files('${PREFIX}/include/dlib', 'dlib/easing.h')
    bld.install_files('${PREFIX}/include/dlib', 'dlib/endian.h')
    bld.install_files('${PREFIX}/include/dlib', 'dlib/dstrings.h')
    bld.install_files('${PREFIX}/include/dlib', 'dlib/dlib.h')
    bld.install_files('${PREFIX}/include/dlib', 'dlib/message.h')
    bld.install_files('${PREFIX}/include/dlib', 'dlib/hashtable.h')
    bld.install_files('${PREFIX}/include/dlib', 'dlib/hash.h')
    bld.install_files('${PREFIX}/include/dlib', 'dlib/http_cache.h')
    bld.install_files('${PREFIX}/include/dlib', 'dlib/http_cache_verify.h')
    bld.install_files('${PREFIX}/include/dlib', 'dlib/http_client.h')
    bld.install_files('${PREFIX}/include/dlib', 'dlib/http_server.h')
    bld.install_files('${PREFIX}/include/dlib', 'dlib/index_pool.h')
    bld.install_files('${PREFIX}/include/dlib', 'dlib/object_pool.h')
    bld.install_files('${PREFIX}/include/dlib', 'dlib/image.h')
    bld.install_files('${PREFIX}/include/dlib', 'dlib/json.h')
    bld.install_files('${PREFIX}/include/dlib', 'dlib/log.h')
    bld.install_files('${PREFIX}/include/dlib', 'dlib/math.h')
    bld.install_files('${PREFIX}/include/dlib', 'dlib/md5.h')
    bld.install_files('${PREFIX}/include/dlib', 'dlib/platform.h')
    bld.install_files('${PREFIX}/include/dlib', 'dlib/poolallocator.h')
    bld.install_files('${PREFIX}/include/dlib', 'dlib/profile.h')
    bld.install_files('${PREFIX}/include/dlib', 'dlib/pprint.h')
    bld.install_files('${PREFIX}/include/dlib', 'dlib/memprofile.h')
    bld.install_files('${PREFIX}/include/dlib', 'dlib/path.h')
    bld.install_files('${PREFIX}/include/dlib', 'dlib/safe_windows.h')
    bld.install_files('${PREFIX}/include/dlib', 'dlib/shared_library.h')
    bld.install_files('${PREFIX}/include/dlib', 'dlib/socket.h')
    bld.install_files('${PREFIX}/include/dlib', 'dlib/spinlock.h')
    bld.install_files('${PREFIX}/include/dlib', 'dlib/ssdp.h')
    bld.install_files('${PREFIX}/include/dlib', 'dlib/stringpool.h')
    bld.install_files('${PREFIX}/include/dlib', 'dlib/sys.h')
    bld.install_files('${PREFIX}/include/dlib', 'dlib/template.h')
    bld.install_files('${PREFIX}/include/dlib', 'dlib/transform.h')
    bld.install_files('${PREFIX}/include/dlib', 'dlib/trig_lookup.h')
    bld.install_files('${PREFIX}/include/dlib', 'dlib/mutex.h')
    bld.install_files('${PREFIX}/include/dlib', 'dlib/thread.h')
    bld.install_files('${PREFIX}/include/dlib', 'dlib/time.h')
    bld.install_files('${PREFIX}/include/dlib', 'dlib/utf8.h')
    bld.install_files('${PREFIX}/include/dlib', 'dlib/uri.h')
    bld.install_files('${PREFIX}/include/dlib', 'dlib/vmath.h')
    bld.install_files('${PREFIX}/include/dlib', 'dlib/web_server.h')
    bld.install_files('${PREFIX}/include/dlib', 'dlib/zlib.h')
    bld.install_files('${PREFIX}/include/dlib', 'dlib/lz4.h')
    bld.install_files('${PREFIX}/lib/python/dlib', 'python/dlib/__init__.py')
    bld.install_files('${PREFIX}/lib/python', 'dlib/memprofile.py')
    bld.install_files('${PREFIX}/bin', '../bin/memprofile.sh', chmod=0755)
    bld.install_files('${PREFIX}/share/doc/images/easing', '../doc/easing/*.png')

    if 'js-web' in bld.env['PLATFORM']:
        bld.install_files('${PREFIX}/lib/js-web/js', 'dlib/js/library_sys.js')

    source_dirs = 'dlib dlib/jsmn zlib lz4 axtls/crypto axtls/ssl jpgd'.split(' ')

    if re.match('arm.*?android', bld.env.PLATFORM):
        source_dirs.append('dlib/linux')
    elif 'darwin' in bld.env.PLATFORM:
        source_dirs.append('dlib/darwin')
    elif 'win32' in bld.env.PLATFORM:
        source_dirs.append('dlib/win32')
    elif ('linux'  in bld.env.PLATFORM) or ('android' in bld.env.PLATFORM):
        source_dirs.append('dlib/linux')
    elif 'js-web' == bld.env.PLATFORM:
        source_dirs.append('dlib/js')

    # NOTE: Add CONFIG_SSL_FULL_MODE when debugging axTLS
    extra_defines = ['ZLIB_CONST', 'CONFIG_SSL_CTX_MUTEXING']
    if bld.env.PLATFORM != 'win32':
        extra_defines.append('Z_HAVE_UNISTD_H')
        extra_defines.append('HAVE_HIDDEN')
        extra_defines.append('CONFIG_USE_DEV_URANDOM')
    else:
        pass
        # NOTE: CONFIG_WIN32_USE_CRYPTO_LIB is disabled
        # on windows due to compile error in RNG_custom_init()
        # when CONFIG_WIN32_USE_CRYPTO_LIB is set (missing entropy_pool, see top of file)

    dlib = bld.new_task_gen(features = 'cc cxx cstaticlib embed',
                            includes = '. axtls/config axtls/crypto axtls/ssl',
                            target = 'dlib',
                            defines= ['VALGRIND'] + extra_defines,
                            embed_source = '../data/profiler.html')
    dlib.find_sources_in_dirs(source_dirs)
    if 'darwin' in bld.env.BUILD_PLATFORM and (re.match('arm.*?android', bld.env.PLATFORM) or bld.env.PLATFORM == 'js-web' or bld.env.PLATFORM == 'as3-web'):
        # NOTE: This is a hack required when cross compiling on
        # darwin to linux platform
        # Objective-c files are collected as we don't have a proper platform
        # We patch CC, CXX, etc
        dlib.source.remove(os.path.join('dlib', 'sys_cocoa.mm'))
        dlib.source.remove(os.path.join('dlib', 'socket_cocoa.mm'))

    if bld.env.PLATFORM == 'as3-web':
        dlib.source.remove(os.path.join('dlib', 'socket.cpp'))
    else:
        dlib.source.remove(os.path.join('dlib', 'socket_null.cpp'))

    if bld.env['PLATFORM'] != 'as3-web':
        dlib = bld.new_task_gen(features = 'cc cxx cshlib embed',
                                includes = '. axtls/config axtls/crypto axtls/ssl',
                                target = 'dlib_shared',
                                defines= ['VALGRIND'] + extra_defines,
                                embed_source = '../data/profiler.html',
                                uselib = 'UUID PLATFORM_SOCKET')
        dlib.find_sources_in_dirs(source_dirs)
        if 'darwin' in bld.env.BUILD_PLATFORM and (re.match('arm.*?android', bld.env.PLATFORM) or bld.env.PLATFORM == 'js-web' or bld.env.PLATFORM == 'as3-web'):
            # NOTE: See comment above
            dlib.source.remove(os.path.join('dlib', 'sys_cocoa.mm'))
            dlib.source.remove(os.path.join('dlib', 'socket_cocoa.mm'))

        if bld.env.PLATFORM == 'as3-web':
            dlib.source.remove(os.path.join('dlib','socket.cpp'))
        else:
            dlib.source.remove(os.path.join('dlib', 'socket_null.cpp'))

    if bld.env['PLATFORM'] != 'win32' and bld.env['PLATFORM'] != 'as3-web':
        dlib = bld.new_task_gen(features = 'cxx cshlib',
                                source='dlib/memprofile.cpp',
                                includes = '.',
                                target = 'dlib_memprofile',
                                defines= 'DM_LIBMEMPROFILE')

        if 'linux' in bld.env['PLATFORM']:
            dlib.env.append_value('LINKFLAGS', [ '-ldl' ])

    classpath = ['%s/ext/share/java/junit-4.6.jar' % bld.env.DYNAMO_HOME]
    classpath = os.pathsep.join(classpath)

    bld.new_task_gen(features='javac seq',
                     classpath=classpath,
                     source_root='java')

    bld.env["JAVACFLAGS"] = '-g -source 1.6 -target 1.6'.split()

    bld.new_task_gen(features='jar seq',
                     basedir='java',
                     destfile='upnp.jar')

    bld.install_files('${PREFIX}/share/java', 'upnp.jar')

    bld.new_task_gen(features='javac seq',
                     classpath=classpath  + os.pathsep + 'default/src/java',
                     source_root='java_test')

def configure(conf):
    pass

