#! /usr/bin/env python
import sys, re, os
import Options

dmglfw = bld.new_task_gen(features = 'cc cstaticlib',
                          target = 'dmglfw')

platform = bld.env.PLATFORM

if platform == 'darwin' or platform == 'x86_64-darwin':
    dmglfw.find_sources_in_dirs('. cocoa')
    dmglfw.includes = '. cocoa'

    # tmp
    dmglfw.source.remove(os.path.join('cocoa','cocoa_joystick.m'))

    if Options.options.with_vulkan:
        dmglfw.source.remove(os.path.join('cocoa','cocoa_window.m'))
    else:
        dmglfw.source.remove(os.path.join('cocoa','cocoa_window_vulkan.m'))

elif platform in ('armv7-darwin', 'arm64-darwin', 'x86_64-ios'):
    dmglfw.find_sources_in_dirs('. ios')
    dmglfw.includes = '. ios'

    if Options.options.with_vulkan:
        dmglfw.source.remove(os.path.join('ios','ios_window.m'))
    else:
        dmglfw.source.remove(os.path.join('ios','ios_window_vulkan.m'))

elif re.match('arm.*?android', platform):
    dmglfw.find_sources_in_dirs('. android')
    dmglfw.includes = '. android'
elif platform == 'linux' or platform == 'x86_64-linux':
    dmglfw.find_sources_in_dirs('. x11')
    dmglfw.includes = '. x11'
elif 'win32' in platform:
    dmglfw.find_sources_in_dirs('. win32')
    dmglfw.includes = '. win32'
elif 'web' in platform:
    dmglfw.find_sources_in_dirs('js-web')
    dmglfw.includes = 'js-web .'
elif platform == 'as3-web':
    dmglfw.find_sources_in_dirs('flash')
    dmglfw.includes = 'flash .'

