import waflib.Task, waflib.TaskGen
from waflib.TaskGen import extension, extension
from waf_dynamo import new_copy_task

blddir = 'build'

def create_simple_protoc_task(name, ext, compiled_ext, type, before, shell = True, color = 'PINK'):
    def create(self, node):
        task = self.create_task(name)
        task.set_inputs(node)
        out = node.change_ext(compiled_ext)
        task.set_outputs(out)

    cmd = 'protoc --encode=%s -I ../src/test -I ${DYNAMO_HOME}/share/proto ../src/test/test_resource_ddf.proto < ${SRC} > ${TGT}' % type
    waflib.Task.task_factory(name, cmd, before=before, shell=shell, color=color)
    extension(ext)(create)
 
create_simple_protoc_task('testresourcecont', '.cont_pb', '.cont', 'TestResource.ResourceContainerDesc', before='c cxx')
create_simple_protoc_task('resourcefoo', '.foo_pb', '.foo', 'TestResource.ResourceFoo', before='c cxx')

# Test archive data. Only copy the source data.
new_copy_task('ad', '.ad', '.adc')
new_copy_task('script', '.script', '.scriptc')

def build(bld):
    resources = bld(source = ['test.cont_pb', 'test_ref.cont_pb', ])
    sources = ['archive_data/%s' % e for e in ['file4.ad', 'file1.ad', 'file3.ad', 'file2.ad', 'file5.script', 'liveupdate.file7.ad', 'liveupdate.file6.script']]

    archive = bld(features='barchive',
                  source_root='src/test',
                  resource_name='resources',
                  use_compression=False,
                  source=' '.join(sources))

    bld.add_group()

    archive_compressed = bld(features='barchive',
                             source_root='src/test',
                             resource_name='resources_compressed',
                             use_compression=True,
                             source=' '.join(sources))

    bld.add_group()

    archive_pb = bld(features='barchive',
                     source_root='src/test',
                     resource_name='resources_pb',
                     use_compression=False,
                     source=bld.path.ant_glob('*.*_pb'))

    bld.add_group()

    test_resource = bld.program(features     = 'cxx embed test',
                                includes     = '.. ../../proto',
                                use          = 'TESTMAIN DDF DLIB PROFILE_NULL PLATFORM_SOCKET THREAD LUA CARES resource',
                                web_libs     = ['library_sys.js'],
                                proto_gen_py = True,
                                target       = 'test_resource',
                                source       = 'test_resource.cpp test_resource_ddf.proto test.cont_pb test01.foo_pb test02.foo_pb self_referring.cont_pb root_loop.cont_pb child_loop.cont_pb many_refs.cont_pb',
                                embed_source = 'resources.arci resources.arcd resources.dmanifest')

    test_resource.install_path = None

    test_resource_archive = bld.program(features     = 'cxx embed test',
                                        includes     = '.. ../../proto',
                                        use          = 'TESTMAIN DDF DLIB PROFILE_NULL PLATFORM_SOCKET THREAD LUA CARES resource',
                                        proto_gen_py = True,
                                        target       = 'test_resource_archive',
                                        source       = 'test_resource_archive.cpp',
                                        embed_source = 'resources.arci resources.arcd resources.dmanifest resources_compressed.arci resources_compressed.arcd resources_compressed.dmanifest resources.public resources.manifest_hash')

    test_resource_archive.install_path = None

    test_block_allocator = bld.program(features = 'cxx test',
                                       includes = '..',
                                       use      = 'TESTMAIN DLIB THREAD resource',
                                       target   = 'test_block_allocator',
                                       source   = 'test_block_allocator.cpp')

    test_block_allocator.install_path = None

