#! /usr/bin/env python

VERSION='0.1'
APPNAME='resource'

srcdir = '.'
blddir = 'build'

import os, subprocess
import sys
sys.path = ["src"] + sys.path
import urllib, time, atexit, urllib.error, urllib.request
from waflib.Logs import error
import waflib.Options
import waf_dynamo, waf_ddf, waf_resource
import TestContext

test_context = None

os.environ['PATH'] = os.path.abspath('src') + os.pathsep + os.environ['PATH']

def init(ctx):
    global test_context
    if 'build' in waflib.Options.commands:
        test_context = TestContext.create_test_context()

def options(opt):
    opt.load('waf_dynamo')

def configure(conf):
    conf.load('waf_dynamo')
    conf.load('waf_resource')
    conf.load('java')

    waf_ddf.configure(conf)

    conf.recurse('src')

    conf.env.append_value('INCLUDES', "src")
    conf.env['STLIB_DLIB'] = ['dlib', 'mbedtls', 'zip']
    conf.env['STLIB_DDF'] = 'ddf'

    conf.env.append_unique('DEFINES', 'DLIB_LOG_DOMAIN="RESOURCE"')

def build(bld):
    global test_context
    bld.recurse('src')
    TestContext.initialize_test_context(test_context, bld)

def kill_proc(proc):
    proc.kill()

def shutdown(self):
    if not TestContext.is_valid(test_context) or waflib.Options.options.skip_build_tests or waflib.Options.options.skip_tests:
        return

    proc = subprocess.Popen(["python", "-m", "http.server", "6123"],
                            shell = False,
                            cwd = "build/src/test")
    atexit.register(kill_proc, proc)

    start = time.time()
    while True:
        if time.time() - start > 5:
            error('HTTP server failed to start within 5 seconds')
            sys.exit(1)
        try:
            urllib.request.urlopen('http://localhost:6123')
            break
        except urllib.error.URLError:
            print('Waiting for HTTP testserver to start...')
            sys.stdout.flush()
            time.sleep(0.5)

    waf_dynamo.run_tests(test_context, valgrind = True)
