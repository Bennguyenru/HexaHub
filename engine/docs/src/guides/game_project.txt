Game Engine Project Settings
============================

The file game.project contains all project wide settings.
It must stay in the same place and cannot be renamed.
The first thing the engine does when starting up and launching your game is looking for this file.

At the moment, this file can only be edited in the text editor.
Whenever we have the time, we will make a fancier editor for it so it gets easier to modify.

Every setting in the file belongs to a category.
The format looks like this:

----
[category1]
setting1 = value
setting2 = value
[category2]
...
----

A real example is:

----
[bootstrap]
main_collection = /logic/main.collectionc
----

which means that the setting _main_collection_ belongs to the _bootstrap_ category.
Whenever a file reference is used, like the example above, the path needs to be appended with a 'c', which is the compiled version of the file.
Also note that your project root is treated as the real root, which is why there is an initial '/'.

Here is a run-through of the most common settings (categories in *bold*):

* *project*
** _title_ - the title of the application
* *display*
** _width_ - the width in pixels of the application window, 960 by default
** _height_ - the height in pixels of the application window, 640 by default
** _fullscreen_ - if the application should start full screen or not, 1 for fullscreen or 0 (default) for windowed
** _update_frequency_ - frame update frequency, 60 by default. Valid values are 60, 30, 20, 15, 12, 10, 6, 5, 4, 3, 2 and 1
** _variable_dt_ - if the frame time step should be measured against actual time or be fixed (set to update_frequency)
** _display_profiles_ - file reference of the display profiles to use for the application, +/builtins/render/default.display_profiles+ by default
** _dynamic_orientation_ - if application supports dynamic screen orientation support
* *sound*
** _gain_ - global gain (volume), 0 - 1, 1 by default
* *physics*
** _type_ - which type of physics to use, +2D+ (default) or +3D+
** _gravity_y_ - world gravity along y-axis, -10 by default (natural gravity)
** _debug_ - whether physics should be visualized for debugging, 1 for yes and 0 (default) for no
** _debug_alpha_ - alpha component for visualized physics, 0 - 1 (0.9 by default)

Here is a list of settings for advanced users:

* *bootstrap*
** _main_collection_ - file reference of the collection to use for starting the application, +/logic/main.collectionc+ by default
** _render_ - which render file to use, which defines the render pipeline, +/builtins/render/default.renderc+ by default
* *display*
** _samples_ - how many samples to use for super sampling anti-aliasing, 0 by default, which means it is turned off
** _update_frequency_ - frame update frequency, 60 by default. Valid values are 60, 30, 20, 15, 12, 10, 6, 5, 4, 3, 2 and 1
* *graphics*
** _default_texture_min_filter_ - which filtering to use for min filtering, +linear+ (default) or +nearest+
** _default_texture_min_filter_ - which filtering to use for mag filtering, +linear+ (default) or +nearest+
** _max_debug_vertices_ - maximum number of debug vertices. Used for physics shape rendering among other things, 10000 by default
* *sound*
** _max_sound_data_ - max number of different sounds, 128 by default
** _max_sound_buffers_ - max number of concurrent sound buffers, 32 by default
** _max_sound_sources_ - max number of concurrently playing sounds, 16 by default
** _max_sound_instances_ - max number of concurrent sound instances, 256 by default
* *particle_system*
** _max_emitter_count_ - max number of concurrent emitters, 0 by default
** _max_particle_count_ - max number of concurrent particles, 0 by default
* *resource*
** _http_cache_ - if the http cache should be enabled for faster loads over network, 1 for yes (default) and 0 for no
** _uri_ - where to find game.project, in URI format
** _max_resources_ - the max number of resources that can be loaded at the same time, 1024 by default
* *input*
** _repeat_delay_ - seconds to wait before treating a held down keyboard-key to start repeating itself
** _repeat_interval_ - seconds to wait between each repetition of a held down keyboard-key
** _gamepads_ - file reference of the gamepads config file, which maps gamepad signals to OS, +/builtins/input/default.gamepadsc+ by default
** _game_binding_ - file reference of the input config file, which maps HW inputs to actions, +/input/game.input_bindingc+ by default
* *physics*
** _world_count_ - max number of concurrent physics worlds, 4 by default (careful, they waste memory)
** _gravity_x_ - world gravity along x-axis, 0 by default
** _gravity_z_ - world gravity along z-axis, 0 by default
** _scale_ - how to scale the physics worlds in relation to the game world for numerical precision, 0.01 - 1 (default)
** _debug_scale_ - how big to draw unit objects in physics, like triads and normals, 30 by default
** _max_collisions_ - how many collisions that will be reported back to the scripts, 64 by default
** _max_contacts_ - how many contact points that will be reported back to the scripts, 128 by default
* *sprite*
** _max_count_ - max number of sprites, 128 by default
** _subpixels_ - whether to allow sprites to appear unaligned with respect to pixels, 1 for yes (default) and 0 for no
* *collection_proxy*
** _max_count_ - max number of collection proxies, 8 by default
* *factory*
** _max_count_ - max number of factories, 128 by default
