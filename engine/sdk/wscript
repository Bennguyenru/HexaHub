#! /usr/bin/env python
import os
from TaskGen import feature, before

VERSION='0.1'
APPNAME='sdk'

srcdir = '.'
blddir = 'build'

import waf_dynamo

def init():
    pass

def set_options(opt):
    opt.tool_options('waf_dynamo')

def configure(conf):
    conf.check_tool('waf_dynamo')
    conf.env['LIB_GTEST'] = 'gtest'
    conf.env['STATICLIB_DLIB'] = 'dlib'
    conf.env['STATICLIB_EXTENSION'] = 'extension'
    conf.env.append_unique('CCDEFINES', 'DLIB_LOG_DOMAIN="SDK"')
    conf.env.append_unique('CXXDEFINES', 'DLIB_LOG_DOMAIN="SDK"')


def build(bld):
    sdk_path = os.path.join(bld.env.DYNAMO_HOME, 'sdk')
    sdk_headers = bld.new_task_gen(
                                 features = 'compile_sdk_headers',
                                 target = 'sdk.h',
                                 install_path = os.path.join(sdk_path, 'include', 'dmsdk'),
                                 sdk_include_path = os.path.join(sdk_path, 'include'),
                                 always=True)
    bld.add_subdirs('src')

def shutdown():
    waf_dynamo.run_gtests(valgrind = True)

@feature('compile_sdk_headers')
@before('cc')
def compile_sdk_headers(task):
    sdk_includes = os.path.join(task.install_path)
    includes = []
    for root, dirs, files in os.walk(sdk_includes):
        for file in files:
            if file.endswith('.h'):
                if(file == 'sdk.h'):
                    continue
                includes.append(os.path.join(root, file))

    with open(os.path.join(task.install_path, task.target), "w") as f:
        f.write("#ifndef DMSDK_SDK_H\n")
        f.write("#define DMSDK_SDK_H\n")
        f.write("\n")
        for include in includes:
            f.write("#include <%s>\n" % os.path.relpath(include, task.sdk_include_path))
        f.write("\n")
        f.write("#endif // DMSDK_SDK_H\n")
