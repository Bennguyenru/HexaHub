package dmGraphics;

import "ddf/ddf_extensions.proto";

option java_package = "com.dynamo.graphics.proto";
option java_outer_classname = "Graphics";

message Cubemap
{
    required string right       = 1 [(resource)=true];
    required string left        = 2 [(resource)=true];
    required string top         = 3 [(resource)=true];
    required string bottom      = 4 [(resource)=true];
    required string front       = 5 [(resource)=true];
    required string back        = 6 [(resource)=true];
}

message TextureImage
{
    enum Type
    {
        // Corresponds to GL_TEXTURE_2D
        TYPE_2D      = 1;
        // Corresponds to GL_TEXTURE_CUBE_MAP
        TYPE_CUBEMAP = 2;
    }
    enum TextureFormat
    {
        TEXTURE_FORMAT_LUMINANCE         = 0;
        TEXTURE_FORMAT_RGB               = 1;
        TEXTURE_FORMAT_RGBA              = 2;
        TEXTURE_FORMAT_RGB_DXT1          = 3;
        TEXTURE_FORMAT_RGBA_DXT1         = 4;
        TEXTURE_FORMAT_RGBA_DXT3         = 5;
        TEXTURE_FORMAT_RGBA_DXT5         = 6;
        TEXTURE_FORMAT_RGB_PVRTC_2BPPV1  = 7;
        TEXTURE_FORMAT_RGB_PVRTC_4BPPV1  = 8;
        TEXTURE_FORMAT_RGBA_PVRTC_2BPPV1 = 9;
        TEXTURE_FORMAT_RGBA_PVRTC_4BPPV1 = 10;
        TEXTURE_FORMAT_RGB_ETC1          = 11;
    }

    message Image
    {
        required uint32 width           = 1;
        required uint32 height          = 2;
        required uint32 original_width  = 3;
        required uint32 original_height = 4;
        required TextureFormat format   = 5;
        repeated uint32 mip_map_offset  = 6;
        repeated uint32 mip_map_size    = 7;
        required bytes data             = 8;
        optional string target_platform = 9; // FIXME(sven): Is this really the best solution? We need some way to check in runtime.
    }

    repeated Image alternatives = 1;
    required Type type          = 2;
    // When count > 1 count mipmaps are laid out contiguously in memory and
    // the mip_map_offset should reflect that, e.g. times 6 for cubemaps
    required uint32 count       = 3;
}

// We encapsulate the texture format in its own message due
// to we cant have repeated enums.
message TextureFormatAlternative
{
    required TextureImage.TextureFormat format = 1;
}

message PathSettings
{
    required string path    = 1;
    required string profile = 2;
}

message PlatformProfile
{
    required string platform                  = 1;
    repeated TextureFormatAlternative formats = 2;
    required bool mipmaps                     = 3;
    optional uint32 max_texture_size          = 4;
}

message TextureProfile
{
    required string name = 1;
    repeated PlatformProfile platforms = 2;
}

message TextureProfiles
{
    enum CompressionLevel {
        LOW    = 0;
        MEDIUM = 1;
        HIGH   = 2;
    }

    repeated PathSettings path_settings         = 1;
    repeated TextureProfile profiles            = 2;
    required CompressionLevel compression_level = 3;
}
