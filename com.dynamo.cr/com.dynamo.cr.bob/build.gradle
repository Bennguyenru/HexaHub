import java.nio.file.Path

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/8.1.1/userguide/building_java_projects.html
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
    //id "com.google.protobuf" version "0.9.2"
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:31.1-jre'

    implementation 'commons-io:commons-io:2.11.0'
    implementation 'commons-codec:commons-codec:1.15'
    implementation 'org.apache.commons:commons-configuration2:2.9.0'

    implementation fileTree(dir: "lib", includes: ['*.jar'])
    implementation fileTree(dir: "ext", includes: ['**/*.jar'])
}

sourceSets {
    main {
        java {
            srcDirs project.buildDir
            srcDirs 'src'
        }
    }
}

testing {
    suites {
        // Configure the built-in test suite
        test {
            // Use JUnit Jupiter test framework
            useJUnitJupiter('5.9.1')
        }
    }
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

jar {

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    manifest {
        attributes 'Main-Class': 'com.dynamo.bob.Bob'
    }

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

class Protoc extends Exec {
    private final File dynamoHomeDir = new File(System.getenv('DYNAMO_HOME'))

    @Inject
    Protoc(String dir, String source) {
        File defoldDir = new File(dynamoHomeDir, '../..').canonicalFile
        File externalDir = new File(dynamoHomeDir, '/ext/include').canonicalFile
        File srcDir = new File(defoldDir, dir).canonicalFile
        File srcFile = new File(defoldDir, source).canonicalFile

        //executable = 'echo'
        executable = dynamoHomeDir.canonicalPath + '/ext/bin/x86_64-macos/protoc'

        File buildDir = project.buildDir
        buildDir.mkdirs()

        args('--java_out=' + buildDir)
        args("-I" + srcDir.canonicalPath)
        args("-I" + externalDir.canonicalPath)
        args("-I" + new File(defoldDir, 'engine/gameobject/proto').canonicalPath)
        args("-I" + new File(defoldDir, 'engine/script/src').canonicalPath)
        args("-I" + new File(defoldDir, 'engine/ddf/src').canonicalPath)
        args(srcFile.canonicalPath)
    }
}

tasks.register('ddf_extensions', Protoc, 'engine/ddf/src', 'engine/ddf/src/ddf/ddf_extensions.proto')
tasks.register('ddf_math', Protoc, 'engine/ddf/src', 'engine/ddf/src/ddf/ddf_math.proto')

tasks.register('properties_ddf', Protoc, 'engine/gameobject/proto', 'engine/gameobject/proto/gameobject/properties_ddf.proto')
tasks.register('gameobject_ddf', Protoc, 'engine/gameobject/proto', 'engine/gameobject/proto/gameobject/gameobject_ddf.proto')
tasks.register('lua_ddf', Protoc, 'engine/gameobject/proto', 'engine/gameobject/proto/gameobject/lua_ddf.proto')

tasks.register('atlas_ddf', Protoc, 'engine/gamesys/proto', 'engine/gamesys/proto/gamesys/atlas_ddf.proto')
tasks.register('camera_ddf', Protoc, 'engine/gamesys/proto', 'engine/gamesys/proto/gamesys/camera_ddf.proto')
tasks.register('gamesys_ddf', Protoc, 'engine/gamesys/proto', 'engine/gamesys/proto/gamesys/gamesys_ddf.proto')
tasks.register('gui_ddf', Protoc, 'engine/gamesys/proto', 'engine/gamesys/proto/gamesys/gui_ddf.proto')
tasks.register('label_ddf', Protoc, 'engine/gamesys/proto', 'engine/gamesys/proto/gamesys/label_ddf.proto')
tasks.register('model_ddf', Protoc, 'engine/gamesys/proto', 'engine/gamesys/proto/gamesys/model_ddf.proto')
tasks.register('physics_ddf', Protoc, 'engine/gamesys/proto', 'engine/gamesys/proto/gamesys/physics_ddf.proto')
tasks.register('sound_ddf', Protoc, 'engine/gamesys/proto', 'engine/gamesys/proto/gamesys/sound_ddf.proto')
tasks.register('sprite_ddf', Protoc, 'engine/gamesys/proto', 'engine/gamesys/proto/gamesys/sprite_ddf.proto')
tasks.register('texture_set_ddf', Protoc, 'engine/gamesys/proto', 'engine/gamesys/proto/gamesys/texture_set_ddf.proto')
tasks.register('tile_ddf', Protoc, 'engine/gamesys/proto', 'engine/gamesys/proto/gamesys/tile_ddf.proto')
tasks.register('mesh_ddf', Protoc, 'engine/gamesys/proto', 'engine/gamesys/proto/gamesys/mesh_ddf.proto')
tasks.register('buffer_ddf', Protoc, 'engine/gamesys/proto', 'engine/gamesys/proto/gamesys/buffer_ddf.proto')

tasks.register('rig_ddf', Protoc, 'engine/rig/proto', 'engine/rig/proto/rig/rig_ddf.proto')
tasks.register('graphics_ddf', Protoc, 'engine/graphics/proto', 'engine/graphics/proto/graphics/graphics_ddf.proto')
tasks.register('input_ddf', Protoc, 'engine/input/proto', 'engine/input/proto/input/input_ddf.proto')
tasks.register('particle_ddf', Protoc, 'engine/particle/proto', 'engine/particle/proto/particle/particle_ddf.proto')
tasks.register('font_ddf', Protoc, 'engine/render/proto', 'engine/render/proto/render/font_ddf.proto')
tasks.register('material_ddf', Protoc, 'engine/render/proto', 'engine/render/proto/render/material_ddf.proto')
tasks.register('render_ddf', Protoc, 'engine/render/proto', 'engine/render/proto/render/render_ddf.proto')
tasks.register('liveupdate_ddf', Protoc, 'engine/resource/proto', 'engine/resource/proto/resource/liveupdate_ddf.proto')
tasks.register('resource_ddf', Protoc, 'engine/resource/proto', 'engine/resource/proto/resource/resource_ddf.proto')
tasks.register('script_doc_ddf', Protoc, 'engine/script/src', 'engine/script/src/script/script_doc_ddf.proto')
tasks.register('lua_source_ddf', Protoc, 'engine/script/src', 'engine/script/src/script/lua_source_ddf.proto')
tasks.register('ddf_script', Protoc, 'engine/script/src', 'engine/script/src/script/ddf_script.proto')
tasks.register('sys_ddf', Protoc, 'engine/script/src', 'engine/script/src/script/sys_ddf.proto')

task EngineVersion(type: Exec) {
    executable 'python'
    args('engine_version_generator.py')
    args('src/com/dynamo/bob/archive/EngineVersion.java')
}

compileJava {
    dependsOn ddf_extensions
    dependsOn ddf_math

    dependsOn properties_ddf
    dependsOn gameobject_ddf
    dependsOn lua_ddf

    dependsOn atlas_ddf
    dependsOn camera_ddf
    dependsOn gamesys_ddf
    dependsOn gui_ddf
    dependsOn label_ddf
    dependsOn model_ddf
    dependsOn physics_ddf
    dependsOn sound_ddf
    dependsOn sprite_ddf
    dependsOn texture_set_ddf
    dependsOn tile_ddf
    dependsOn mesh_ddf
    dependsOn buffer_ddf

    dependsOn rig_ddf
    dependsOn graphics_ddf
    dependsOn input_ddf
    dependsOn particle_ddf
    dependsOn font_ddf
    dependsOn material_ddf
    dependsOn render_ddf
    dependsOn liveupdate_ddf
    dependsOn resource_ddf
    dependsOn script_doc_ddf
    dependsOn lua_source_ddf
    dependsOn ddf_script
    dependsOn sys_ddf

    dependsOn EngineVersion
}

