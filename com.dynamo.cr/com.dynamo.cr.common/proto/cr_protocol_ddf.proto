package dmContentRepoProtocol;

//import "ddf_extensions.proto";

option java_package = "com.dynamo.cr.protocol.proto";
option java_outer_classname = "Protocol";

/*
  URI REST schemes:

  Projects:
    GET: http://host/projects/id
    GET: http://host/projects/

  Branches:
    GET, PUT, DELETE: http://host/branch/project/user/branch_name

  Merge/Update/Publish/Commit/Resolve:
    POST: http://host/branch/project/user/branch_name/commits/update
    POST: http://host/branch/project/user/branch_name/commits/commit
    POST: http://host/branch/project/user/branch_name/commits/commit_merge
    POST: http://host/branch/project/user/branch_name/commits/publish
    PUT: http://host/branch/project/user/branch_name/resolve/stage/path

  Resources:
    GET, PUT, DELETE: http://host/branch/project/user/branch_name/resources/path

  Builds:
    POST: http://host/branch/project/user/branch_name/builds
    GET: http://host/branch/project/user/branch_name/builds/build_nr
*/

// Some messages below are currently not used. See TODO

message RegisterUser
{
    required string email = 1;
    required string first_name = 2;
    optional string last_name = 3 [default = ""];
    required string password = 4;
}

enum CommandType
{
    LOGIN = 1;
}

enum Status
{
    NOT_LOGGED_IN = 1;
    OK = 0;
    FAILURE = -1;
}

message TokenExchangeInfo {
    enum Type {
        LOGIN = 1;
        SIGNUP = 2;
    }
    required string first_name = 1;
    required string last_name = 2;
    required string email = 3;
    required string login_token = 4;
    required Type type = 5;
    // Only set if type == LOGIN
    optional string auth_token = 6;
    optional int64 user_id = 7;
}

message LoginInfo {
    required string email = 1;
    required int64 user_id = 2;
    required string auth_token = 3;
    optional string first_name = 4;
    optional string last_name = 5;
}

message UserInfo {
    required int64 id = 1;
    required string email = 2;
    required string first_name = 3;
    required string last_name = 4;
}

message UserInfoList {
    repeated UserInfo users = 1;
}

message NewProject {
    required string name = 1;
    optional string description = 2 [default = ""];
    optional string templateId = 3;
}

message ProjectTemplateInfo {
    required string id = 1;
    required string description = 2;
}

message ProjectTemplateInfoList {
    repeated ProjectTemplateInfo templates = 1;
}

// Status of the project in relation to the user who fetched the information
enum ProjectStatus {
    PROJECT_STATUS_OK = 0;
    PROJECT_STATUS_UNQUALIFIED = -1;
}

message ProjectInfo {
    required int64 id = 1;
    required string name = 2;
    required string description = 4;
    required UserInfo owner = 5;
    repeated UserInfo members = 6;
    required int64 created = 7;
    required int64 lastUpdated = 8;
    required string repositoryUrl = 9;
    optional string iOSExecutableUrl = 10;
    optional ProjectStatus status = 11 [default = PROJECT_STATUS_OK];
}

message ProjectInfoList {
    repeated ProjectInfo projects = 1;
}

message ProjectList {
    repeated ProjectInfo projects = 1;
}

message BranchStatus
{
    enum State
    {
        CLEAN = 0;
        DIRTY = 1;
        MERGE = 2;
    }

    message Status
    {
        // Path relative to branch root
        required string name = 1;

        // "M" => for modified
        // "U" => for unmerged
        // "A" => for added
        // "D" => for deleteted
        // "R" => for renamed
        // "C" => for copied
        required string index_status = 2;
        required string working_tree_status = 3;

        // Original name, only set if file is renamed
        optional string original = 4;
    }

    // TODO: Change to Path?
    required string name = 1;
    required State branch_state = 2;
    repeated Status file_status = 3;
    optional uint32 commits_ahead = 4 [default = 0];
    optional uint32 commits_behind = 5 [default = 0];
}

message BranchList
{
    repeated string branches = 1;
}

enum ResolveStage
{
    BASE = 1;
    YOURS = 2;
    THEIRS = 3;
}

enum ResourceType
{
    FILE = 1;
    DIRECTORY = 2;
}

message ResourceInfo
{
    required string path = 1;
    required string name = 2;
    required ResourceType type = 3;
    required int64 last_modified = 4;
    optional int32 size = 5;

    // Only valid if Type == ResourceType.DIRECTORY
    repeated string sub_resource_names = 6;
}

message CommitDesc
{
    required string id = 1;
    required string message = 2;
    optional string name = 3 [default=""];
    optional string email = 4 [default=""];
    optional string date = 5 [default=""];
}

message ResourceDesc
{
    required string path = 1;
}

message Response
{
    required Status status = 1;
    required string message = 2;
}

message CommandPayload
{
    required CommandType type = 1;
    required string login_token = 2;
    required bytes payload = 3;
}

message LoginCommand
{
    required string user_name = 1;
}

message NewBuild
{
    optional int32 dummy = 99;
}

message Log
{
    repeated CommitDesc commits = 1;
}

message InvitationAccountInfo
{
    required int32 original_count = 1;
    required int32 current_count = 2;
}

message ProductInfo {
    required int64 id = 1;
    required string name = 2;
    required int32 max_member_count = 3;
    required int32 fee = 4;
    required string signup_url = 5;
}

message ProductInfoList {
    repeated ProductInfo products = 1;
}

message CreditCardInfo {
    required string masked_number = 1;
    required int32 expiration_month = 2;
    required int32 expiration_year = 3;
}

enum UserSubscriptionState {
    CANCELED = 0;
    PENDING = 1;
    ACTIVE = 2;
}

message UserSubscriptionInfo {
    required ProductInfo product = 1;
    required UserSubscriptionState state = 2;
    optional CreditCardInfo credit_card = 3;
    optional string update_url = 4;
    optional string cancellation_message = 5;
}

message NewsSubscriber {
    required string email = 1;
    required string first_name = 2;
    required string last_name = 3;
    required string key = 4;
}

message NewsSubscriberList {
    repeated NewsSubscriber subscribers = 1;
}
