diff -ruw a/Makefile b/Makefile
--- a/Makefile	2021-06-14 14:56:54.000000000 +0200
+++ b/Makefile	2021-07-13 15:48:49.000000000 +0200
@@ -44,7 +44,7 @@
 INSTALL_MAN= $(INSTALL_SHARE)/man/man1
 INSTALL_PKGCONFIG= $(INSTALL_LIB)/pkgconfig
 
-INSTALL_TNAME= luajit-$(VERSION)
+INSTALL_TNAME= luajit-$(VERSION)-$(DEFOLD_ARCH)
 INSTALL_TSYMNAME= luajit
 INSTALL_ANAME= libluajit-$(ABIVER).a
 INSTALL_SOSHORT1= libluajit-$(ABIVER).so
@@ -60,7 +60,7 @@
 INSTALL_SHORT1= $(INSTALL_LIB)/$(INSTALL_SOSHORT1)
 INSTALL_SHORT2= $(INSTALL_LIB)/$(INSTALL_SOSHORT2)
 INSTALL_T= $(INSTALL_BIN)/$(INSTALL_TNAME)
-INSTALL_TSYM= $(INSTALL_BIN)/$(INSTALL_TSYMNAME)
+INSTALL_TSYM= $(INSTALL_BIN)/$(INSTALL_TSYMNAME)-$(DEFOLD_ARCH)
 INSTALL_PC= $(INSTALL_PKGCONFIG)/$(INSTALL_PCNAME)
 
 INSTALL_DIRS= $(INSTALL_BIN) $(INSTALL_LIB) $(INSTALL_INC) $(INSTALL_MAN) \
@@ -109,7 +109,7 @@
 INSTALL_DEP= src/luajit
 
 default all $(INSTALL_DEP):
-	@echo "==== Building LuaJIT $(VERSION) ===="
+	@echo "==== Building LuaJIT $(VERSION) with TARGET_SYS: '$(TARGET_SYS)' on host"
 	$(MAKE) -C src
 	@echo "==== Successfully built LuaJIT $(VERSION) ===="
 
@@ -130,12 +130,15 @@
 	  $(RM) $(FILE_PC).tmp
 	cd src && $(INSTALL_F) $(FILES_INC) $(INSTALL_INC)
 	cd src/jit && $(INSTALL_F) $(FILES_JITLIB) $(INSTALL_JITLIB)
+	$(SYMLINK) $(INSTALL_TNAME) $(INSTALL_TSYM)
 	@echo "==== Successfully installed LuaJIT $(VERSION) to $(PREFIX) ===="
+	@echo "SKIP_BIN_INSTALL: ${SKIP_BIN_INSTALL}" # If we should install (output) anything in the /bin/ dir.
+	@echo "INSTALL_BIN: ${INSTALL_BIN}"
+	@echo "INSTALL_TNAME: ${INSTALL_TNAME}"
+	@echo "INSTALL_TSYMNAME: ${INSTALL_TSYMNAME}"
+	@echo "INSTALL_TSYM: ${INSTALL_TSYM}"
 	@echo ""
-	@echo "Note: the development releases deliberately do NOT install a symlink for luajit"
-	@echo "You can do this now by running this command (with sudo):"
-	@echo ""
-	@echo "  $(SYMLINK) $(INSTALL_TNAME) $(INSTALL_TSYM)"
+	@echo "Note: the development releases installs a symlink for luajit"
 	@echo ""
 
 
diff -ruw a/src/Makefile b/src/Makefile
--- a/src/Makefile	2021-06-14 14:56:54.000000000 +0200
+++ b/src/Makefile	2021-07-13 15:48:49.000000000 +0200
@@ -205,14 +205,20 @@
 HOST_ALDFLAGS= $(LDOPTIONS) $(HOST_XLDFLAGS) $(HOST_LDFLAGS)
 HOST_ALIBS= $(HOST_XLIBS) $(LIBS) $(HOST_LIBS)
 
+# missing from the original make file
+DEFAULT_AR = ar
+AR= $(DEFAULT_AR)
+DEFAULT_STRIP = strip
+STRIP= $(DEFAULT_STRIP)
+
 STATIC_CC = $(CROSS)$(CC)
 DYNAMIC_CC = $(CROSS)$(CC) -fPIC
 TARGET_CC= $(STATIC_CC)
 TARGET_STCC= $(STATIC_CC)
 TARGET_DYNCC= $(DYNAMIC_CC)
 TARGET_LD= $(CROSS)$(CC)
-TARGET_AR= $(CROSS)ar rcus
-TARGET_STRIP= $(CROSS)strip
+TARGET_AR= $(CROSS)$(AR) rcus
+TARGET_STRIP= $(CROSS)$(STRIP)
 
 TARGET_LIBPATH= $(or $(PREFIX),/usr/local)/$(or $(MULTILIB),lib)
 TARGET_SONAME= libluajit-$(ABIVER).so.$(MAJVER)
@@ -534,7 +540,7 @@
   TARGET_DYNCC= $(STATIC_CC)
   LJVM_MODE= peobj
   LJVM_BOUT= $(LJVM_O)
-  LUAJIT_T= luajit.exe
+  LUAJIT_T= luajit-$(DEFOLD_ARCH).exe
   ifeq (cygwin,$(HOST_MSYS))
     LUAJIT_SO= cyg$(TARGET_DLLNAME)
   else
@@ -639,16 +645,24 @@
 
 $(MINILUA_T): $(MINILUA_O)
 	$(E) "HOSTLINK  $@"
+	$(E) "TARGET_LJARCH=$(TARGET_LJARCH)"
+	$(E) "DASM_ARCH=$(DASM_ARCH)"
+	$(E) "CFLAGS=$(CFLAGS)"
+	$(E) "HOST_CFLAGS=$(HOST_CFLAGS)"
+	$(E) "TARGET_CFLAGS=$(TARGET_CFLAGS)"
+	$(E) "TARGET_FLAGS=$(TARGET_FLAGS)"
+	$(E) $(Q)$(HOST_CC) $(HOST_ALDFLAGS) -o $@ $(MINILUA_O) $(MINILUA_LIBS) $(HOST_ALIBS)
 	$(Q)$(HOST_CC) $(HOST_ALDFLAGS) -o $@ $(MINILUA_O) $(MINILUA_LIBS) $(HOST_ALIBS)
 
 host/buildvm_arch.h: $(DASM_DASC) $(DASM_DEP) $(DASM_DIR)/*.lua lj_arch.h lua.h luaconf.h
-	$(E) "DYNASM    $@"
+	$(E) "DYNASM    $@ using $(DASM_DASC)"
 	$(Q)$(DASM) $(DASM_FLAGS) -o $@ $(DASM_DASC)
 
 host/buildvm.o: $(DASM_DIR)/dasm_*.h
 
 $(BUILDVM_T): $(BUILDVM_O)
 	$(E) "HOSTLINK  $@"
+	$(E) $(Q)$(HOST_CC) $(HOST_ALDFLAGS) -o $@ $(BUILDVM_O) $(HOST_ALIBS)
 	$(Q)$(HOST_CC) $(HOST_ALDFLAGS) -o $@ $(BUILDVM_O) $(HOST_ALIBS)
 
 $(LJVM_BOUT): $(BUILDVM_T)
@@ -686,6 +700,7 @@
 %.o: %.c
 	$(E) "CC        $@"
 	$(Q)$(TARGET_DYNCC) $(TARGET_ACFLAGS) -c -o $(@:.o=_dyn.o) $<
+	$(E) $(Q)$(TARGET_CC) $(TARGET_ACFLAGS) -c -o $@ $<
 	$(Q)$(TARGET_CC) $(TARGET_ACFLAGS) -c -o $@ $<
 
 %.o: %.S
@@ -696,9 +711,11 @@
 $(LUAJIT_O):
 	$(E) "CC        $@"
 	$(Q)$(TARGET_STCC) $(TARGET_ACFLAGS) -c -o $@ $<
+	$(E) $(Q)$(TARGET_STCC) $(TARGET_ACFLAGS) -c -o $@ $<
 
 $(HOST_O): %.o: %.c
 	$(E) "HOSTCC    $@"
+	$(E) $(Q)$(HOST_CC) $(HOST_ACFLAGS) -c -o $@ $<
 	$(Q)$(HOST_CC) $(HOST_ACFLAGS) -c -o $@ $<
 
 include Makefile.dep
@@ -709,6 +726,7 @@
 
 $(LUAJIT_A): $(LJVMCORE_O)
 	$(E) "AR        $@"
+	$(E) $(Q)$(TARGET_AR) $@ $(LJVMCORE_O)
 	$(Q)$(TARGET_AR) $@ $(LJVMCORE_O)
 
 # The dependency on _O, but linking with _DYNO is intentional.
@@ -719,6 +737,7 @@
 
 $(LUAJIT_T): $(TARGET_O) $(LUAJIT_O) $(TARGET_DEP)
 	$(E) "LINK      $@"
+	$(E) $(Q)$(TARGET_LD) $(TARGET_ALDFLAGS) -o $@ $(LUAJIT_O) $(TARGET_O) $(TARGET_ALIBS)
 	$(Q)$(TARGET_LD) $(TARGET_ALDFLAGS) -o $@ $(LUAJIT_O) $(TARGET_O) $(TARGET_ALIBS)
 	$(Q)$(TARGET_STRIP) $@
 	$(E) "OK        Successfully built LuaJIT"
diff -ruw a/src/jit/bcsave.lua b/src/jit/bcsave.lua
--- a/src/jit/bcsave.lua	2021-06-14 14:56:54.000000000 +0200
+++ b/src/jit/bcsave.lua	2021-07-13 15:48:49.000000000 +0200
@@ -29,6 +29,7 @@
   -l        Only list bytecode.
   -s        Strip debug info (default).
   -g        Keep debug info.
+  -f        Set file name passed to loadfile
   -n name   Set module name (default: auto-detect from input name).
   -t type   Set output file type (default: auto-detect from output name).
   -a arch   Override architecture for object files (default: native).
@@ -49,10 +50,13 @@
   os.exit(1)
 end
 
-local function readfile(input)
+local function readfile(input, filename)
   if type(input) == "function" then return input end
   if input == "-" then input = nil end
-  return check(loadfile(input))
+  local f = assert(io.open(input, "r"))
+  local src = f:read("*all")
+  f:close()
+  return check(loadstring(src, filename))
 end
 
 local function savefile(name, mode)
@@ -579,13 +583,13 @@
 
 ------------------------------------------------------------------------------
 
-local function bclist(input, output)
-  local f = readfile(input)
+local function bclist(input, output, filename)
+  local f = readfile(input, filename)
   require("jit.bc").dump(f, savefile(output, "w"), true)
 end
 
-local function bcsave(ctx, input, output)
-  local f = readfile(input)
+local function bcsave(ctx, input, output, filename)
+  local f = readfile(input, filename)
   local s = string.dump(f, ctx.strip)
   local t = ctx.type
   if not t then
@@ -608,6 +612,7 @@
   local arg = {...}
   local n = 1
   local list = false
+  local filename = nil
   local ctx = {
     strip = true, arch = jit.arch, os = jit.os:lower(),
     type = false, modname = false,
@@ -638,6 +643,8 @@
 	    ctx.arch = checkarg(tremove(arg, n), map_arch, "architecture")
 	  elseif opt == "o" then
 	    ctx.os = checkarg(tremove(arg, n), map_os, "OS name")
+    elseif opt == "f" then
+      filename = tremove(arg, n)
 	  else
 	    usage()
 	  end
@@ -649,10 +656,10 @@
   end
   if list then
     if #arg == 0 or #arg > 2 then usage() end
-    bclist(arg[1], arg[2] or "-")
+    bclist(arg[1], arg[2] or "-", filename or arg[1])
   else
     if #arg ~= 2 then usage() end
-    bcsave(ctx, arg[1], arg[2])
+    bcsave(ctx, arg[1], arg[2], filename or arg[1])
   end
 end
 
diff -ruw a/src/lib_io.c b/src/lib_io.c
--- a/src/lib_io.c	2021-06-14 14:56:54.000000000 +0200
+++ b/src/lib_io.c	2021-07-13 17:07:20.000000000 +0200
@@ -431,7 +431,7 @@
 LJLIB_CF(io_tmpfile)
 {
   IOFileUD *iof = io_file_new(L);
-#if LJ_TARGET_PS3 || LJ_TARGET_PS4 || LJ_TARGET_PSVITA
+#if LJ_TARGET_CONSOLE
   iof->fp = NULL; errno = ENOSYS;
 #else
   iof->fp = tmpfile();
diff -ruw a/src/lib_os.c b/src/lib_os.c
--- a/src/lib_os.c	2021-06-14 14:56:54.000000000 +0200
+++ b/src/lib_os.c	2021-07-13 17:04:46.000000000 +0200
@@ -76,7 +76,7 @@
 
 LJLIB_CF(os_tmpname)
 {
-#if LJ_TARGET_PS3 || LJ_TARGET_PS4 || LJ_TARGET_PSVITA
+#if LJ_TARGET_CONSOLE
   lj_err_caller(L, LJ_ERR_OSUNIQF);
   return 0;
 #else
diff -ruw a/src/lj_alloc.c b/src/lj_alloc.c
--- a/src/lj_alloc.c	2021-06-14 14:56:54.000000000 +0200
+++ b/src/lj_alloc.c	2021-07-13 15:48:49.000000000 +0200
@@ -36,7 +36,7 @@
 #ifndef LUAJIT_USE_SYSMALLOC
 
 #define MAX_SIZE_T		(~(size_t)0)
-#define MALLOC_ALIGNMENT	((size_t)8U)
+#define MALLOC_ALIGNMENT	((size_t)16U)
 
 #define DEFAULT_GRANULARITY	((size_t)128U * (size_t)1024U)
 #define DEFAULT_TRIM_THRESHOLD	((size_t)2U * (size_t)1024U * (size_t)1024U)
diff -ruw a/src/lj_arch.h b/src/lj_arch.h
--- a/src/lj_arch.h	2021-06-14 14:56:54.000000000 +0200
+++ b/src/lj_arch.h	2021-07-13 17:10:39.000000000 +0200
@@ -68,7 +68,6 @@
 #else
 #error "No support for this architecture (yet)"
 #endif
-
 #endif
 
 /* Select native OS if no target OS defined. */
@@ -162,6 +161,14 @@
 #endif
 #endif
 
+#if defined(LUAJIT_CONSOLE)
+    #if LUAJIT_CONSOLE == 1
+        #define LJ_TARGET_CONSOLE   1
+    #else
+        #define LJ_TARGET_CONSOLE   0
+    #endif
+#endif
+
 /* -- Arch-specific settings ---------------------------------------------- */
 
 /* Set target architecture properties. */
diff -ruw a/src/lj_jit.h b/src/lj_jit.h
--- a/src/lj_jit.h	2021-06-14 14:56:54.000000000 +0200
+++ b/src/lj_jit.h	2021-07-13 15:48:49.000000000 +0200
@@ -439,9 +439,9 @@
   int32_t framedepth;	/* Current frame depth. */
   int32_t retdepth;	/* Return frame depth (count of RETF). */
 
-  uint32_t k32[LJ_K32__MAX];  /* Common 4 byte constants used by backends. */
+  uint32_t k32[LJ_K32__MAX+1];  /* Common 4 byte constants used by backends. */
   TValue ksimd[LJ_KSIMD__MAX*2+1];  /* 16 byte aligned SIMD constants. */
-  TValue k64[LJ_K64__MAX];  /* Common 8 byte constants. */
+  TValue k64[LJ_K64__MAX+1];  /* Common 8 byte constants. */
 
   IRIns *irbuf;		/* Temp. IR instruction buffer. Biased with REF_BIAS. */
   IRRef irtoplim;	/* Upper limit of instuction buffer (biased). */
diff -ruw a/src/lj_obj.h b/src/lj_obj.h
--- a/src/lj_obj.h	2021-06-14 14:56:54.000000000 +0200
+++ b/src/lj_obj.h	2021-07-13 15:48:49.000000000 +0200
@@ -316,15 +316,24 @@
 
 /* -- Userdata object ----------------------------------------------------- */
 
+#if defined(__GNUC__)
+#define DM_ALIGNED(a) __attribute__ ((aligned (a)))
+#elif defined(_MSC_VER)
+#define DM_ALIGNED(a) __declspec(align(a))
+#else
+#error "Unsupported compiler"
+#endif
+
 /* Userdata object. Payload follows. */
-typedef struct GCudata {
+typedef struct DM_ALIGNED(16) GCudata {
   GCHeader;
   uint8_t udtype;	/* Userdata type. */
   uint8_t unused2;
   GCRef env;		/* Should be at same offset in GCfunc. */
   MSize len;		/* Size of payload. */
   GCRef metatable;	/* Must be at same offset in GCtab. */
-  uint32_t align1;	/* To force 8 byte alignment of the payload. */
+  uint32_t align0;	/* To force 8 byte alignment of the payload. */
+  uint64_t align1; /* ^ */
 } GCudata;
 
 /* Userdata types. */
diff -ruw a/src/msvcbuild.bat b/src/msvcbuild.bat
--- a/src/msvcbuild.bat	2021-06-14 14:56:54.000000000 +0200
+++ b/src/msvcbuild.bat	2021-07-13 15:57:38.000000000 +0200
@@ -12,6 +12,52 @@
 
 @if not defined INCLUDE goto :FAIL
 
+@rem These lines will be installation-dependent.
+@set VSINSTALLDIR=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\
+@set WindowsSdkDir=C:\Program Files (x86)\Windows Kits\10\
+@set WindowsLibPath=C:\Program Files (x86)\Windows
+@set WindowsSDKLibVersion=10.0.19041.0\
+@set UCRTVersion=10.0.19041.0
+@set FrameworkDir32=C:\Windows\Microsoft.NET\Framework\
+@set FrameworkDir64=C:\Windows\Microsoft.NET\Framework64\
+@set FrameworkVersion64=v4.0.30319
+@set VCToolsVersion=14.29.30037
+
+@rem The following should be largely installation-independent.
+@set VCINSTALLDIR=%VSINSTALLDIR%VC\
+@set DevEnvDir=%VSINSTALLDIR%Common7\IDE\
+
+@set c_VSINSTALLDIR=%VSINSTALLDIR%
+@set c_WindowsSdkDir=%WindowsSdkDir%
+@set c_FrameworkDir=%FrameworkDir%
+
+@set PATH=%c_WindowsSdkDir%bin;%PATH%
+@set PATH=%c_VSINSTALLDIR%VC/VCPackages;%PATH%
+@set PATH=%c_FrameworkDir%%FrameworkVersion%;%PATH%
+@set PATH=%c_VSINSTALLDIR%Common7/Tools;%PATH%
+@set PATH=%c_VSINSTALLDIR%VC/BIN;%PATH%
+@set PATH=%c_VSINSTALLDIR%Common7/IDE/;%PATH%
+
+@if "%3"=="win32" goto SETUP_VC_32
+@if "%3"=="x86_64-win32" goto SETUP_VC_64
+
+:SETUP_VC_32
+@set MSVC_ARCH=x86
+goto SETUP_VC
+
+:SETUP_VC_64
+@set MSVC_ARCH=x64
+goto SETUP_VC
+
+:SETUP_VC
+@echo Using visual studio setup %MSVC_ARCH%
+@set INCLUDE=%VSINSTALLDIR%\VC\Tools\MSVC\%VCToolsVersion%\ATLMFC\include;%VSINSTALLDIR%\VC\Tools\MSVC\%VCToolsVersion%\include;%WindowsSdkDir%\include\%UCRTVersion%\ucrt;%WindowsSdkDir%\include\%UCRTVersion%\shared;%WindowsSdkDir%\include\%UCRTVersion%\um;%WindowsSdkDir%\include\%UCRTVersion%\winrt;%WindowsSdkDir%\include\%UCRTVersion%\cppwinrt
+@set LIB=%VSINSTALLDIR%\VC\Tools\MSVC\%VCToolsVersion%\ATLMFC\lib\%MSVC_ARCH%;%VSINSTALLDIR%\VC\Tools\MSVC\%VCToolsVersion%\lib\%MSVC_ARCH%;%WindowsSdkDir%\lib\%UCRTVersion%\ucrt\%MSVC_ARCH%;%WindowsSdkDir%\lib\%UCRTVersion%\um\%MSVC_ARCH%
+@set LIBPATH=%VSINSTALLDIR%\VC\Tools\MSVC\%VCToolsVersion%\ATLMFC\lib\%MSVC_ARCH%;%VSINSTALLDIR%\VC\Tools\MSVC\%VCToolsVersion%\lib\%MSVC_ARCH%;%WindowsSdkDir%\UnionMetadata\%UCRTVersion%;%WindowsSdkDir%\References\%UCRTVersion%;
+@set PATH=%VSINSTALLDIR%\Common7\IDE\Extensions\Microsoft\IntelliCode\CLI;%VSINSTALLDIR%\VC\Tools\MSVC\%VCToolsVersion%\bin\Host%MSVC_ARCH%\%MSVC_ARCH%;%VSINSTALLDIR%\Common7\IDE\VC\VCPackages;%VSINSTALLDIR%\Common7\IDE\CommonExtensions\Microsoft\TestWindow;%VSINSTALLDIR%\Common7\IDE\CommonExtensions\Microsoft\TeamFoundation\Team Explorer;%VSINSTALLDIR%\MSBuild\Current\bin\Roslyn;%VSINSTALLDIR%\Team Tools\Performance Tools\%MSVC_ARCH%;%VSINSTALLDIR%\Team Tools\Performance Tools;%VSINSTALLDIR%\Common7\Tools\devinit;%VSINSTALLDIR%\MSBuild\Current\Bin;%VSINSTALLDIR%\Common7\IDE\;%VSINSTALLDIR%\Common7\Tools\;%VSINSTALLDIR%\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin;%VSINSTALLDIR%\Common7\IDE\CommonExtensions\Microsoft\CMake\Ninja;%WindowsSdkDir%\bin\%UCRTVersion%\%MSVC_ARCH%;%WindowsSdkDir%\bin\%MSVC_ARCH%
+goto SETUP_VC_DONE
+:SETUP_VC_DONE
+
 @setlocal
 @rem Add more debug flags here, e.g. DEBUGCFLAGS=/DLUA_USE_APICHECK
 @set DEBUGCFLAGS=
@@ -23,7 +69,7 @@
 @set DASM=%DASMDIR%\dynasm.lua
 @set DASC=vm_x64.dasc
 @set LJDLLNAME=lua51.dll
-@set LJLIBNAME=lua51.lib
+@set LJLIBNAME=libluajit-5.1.lib
 @set BUILDTYPE=release
 @set ALL_LIB=lib_base.c lib_math.c lib_bit.c lib_string.c lib_table.c lib_io.c lib_os.c lib_package.c lib_debug.c lib_jit.c lib_ffi.c lib_buffer.c
 
@@ -48,6 +94,7 @@
 @set DASC=vm_x86.dasc
 @set LJCOMPILE=%LJCOMPILE% /DLUAJIT_DISABLE_GC64
 :GC64
++@echo "Using " %LJCOMPILE% %DASC%
 minilua %DASM% -LN %DASMFLAGS% -o host\buildvm_arch.h %DASC%
 @if errorlevel 1 goto :BAD
 
@@ -104,10 +151,10 @@
 
 %LJCOMPILE% luajit.c
 @if errorlevel 1 goto :BAD
-%LJLINK% /out:luajit.exe luajit.obj %LJLIBNAME%
+%LJLINK% /out:luajit-%DEFOLD_ARCH%.exe luajit.obj %LJLIBNAME%
 @if errorlevel 1 goto :BAD
-if exist luajit.exe.manifest^
-  %LJMT% -manifest luajit.exe.manifest -outputresource:luajit.exe
+if exist luajit-%DEFOLD_ARCH%.exe.manifest^
+  %LJMT% -manifest luajit-%DEFOLD_ARCH%.exe.manifest -outputresource:luajit-%DEFOLD_ARCH%.exe
 
 @del *.obj *.manifest minilua.exe buildvm.exe
 @del host\buildvm_arch.h
