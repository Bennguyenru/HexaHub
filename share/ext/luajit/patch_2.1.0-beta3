diff -u -r -w a/LuaJIT-2.1.0-beta3/src/jit/bcsave.lua b/LuaJIT-2.1.0-beta3/src/jit/bcsave.lua
--- a/LuaJIT-2.1.0-beta3/src/jit/bcsave.lua 2017-05-01 21:05:00.000000000 +0200
+++ b/LuaJIT-2.1.0-beta3/src/jit/bcsave.lua 2019-02-18 17:19:53.000000000 +0100
@@ -29,6 +29,7 @@
   -l        Only list bytecode.
   -s        Strip debug info (default).
   -g        Keep debug info.
+  -f        Set file name passed to loadfile
   -n name   Set module name (default: auto-detect from input name).
   -t type   Set output file type (default: auto-detect from output name).
   -a arch   Override architecture for object files (default: native).
@@ -49,10 +50,13 @@
   os.exit(1)
 end

-local function readfile(input)
+local function readfile(input, filename)
   if type(input) == "function" then return input end
   if input == "-" then input = nil end
-  return check(loadfile(input))
+  local f = assert(io.open(input, "r"))
+  local src = f:read("*all")
+  f:close()
+  return check(loadstring(src, filename))
 end

 local function savefile(name, mode)
@@ -579,13 +583,13 @@

 ------------------------------------------------------------------------------

-local function bclist(input, output)
-  local f = readfile(input)
+local function bclist(ctx, input, output, filename)
+  local f = readfile(input, filename)
   require("jit.bc").dump(f, savefile(output, "w"), true)
 end

-local function bcsave(ctx, input, output)
-  local f = readfile(input)
+local function bcsave(ctx, input, output, filename)
+  local f = readfile(input, filename)
   local s = string.dump(f, ctx.strip)
   local t = ctx.type
   if not t then
@@ -608,6 +612,7 @@
   local arg = {...}
   local n = 1
   local list = false
+  local filename = nil
   local ctx = {
     strip = true, arch = jit.arch, os = jit.os:lower(),
     type = false, modname = false,
@@ -638,6 +643,8 @@
        ctx.arch = checkarg(tremove(arg, n), map_arch, "architecture")
      elseif opt == "o" then
        ctx.os = checkarg(tremove(arg, n), map_os, "OS name")
+     elseif opt == "f" then
+       filename = tremove(arg, n)
      else
        usage()
      end
@@ -649,10 +657,10 @@
   end
   if list then
     if #arg == 0 or #arg > 2 then usage() end
-    bclist(arg[1], arg[2] or "-")
+    bclist(arg[1], arg[2] or "-", filename or arg[1])
   else
     if #arg ~= 2 then usage() end
-    bcsave(ctx, arg[1], arg[2])
+    bcsave(ctx, arg[1], arg[2], filename or arg[1])
   end
 end

diff --git a/LuaJIT-2.1.0-beta3/src/lib_io.c b/LuaJIT-2.1.0-beta3/src/lib_io.c
index 9763ed466..e302194b7 100644
--- a/LuaJIT-2.1.0-beta3/src/lib_io.c
+++ b/LuaJIT-2.1.0-beta3/src/lib_io.c
@@ -431,7 +431,7 @@ LJLIB_CF(io_popen)
 LJLIB_CF(io_tmpfile)
 {
   IOFileUD *iof = io_file_new(L);
-#if LJ_TARGET_PS3 || LJ_TARGET_PS4 || LJ_TARGET_PSVITA
+#if LJ_TARGET_PS3 || LJ_TARGET_PS4 || LJ_TARGET_PSVITA || LJ_TARGET_NX
   iof->fp = NULL; errno = ENOSYS;
 #else
   iof->fp = tmpfile();
diff --git a/LuaJIT-2.1.0-beta3/src/lib_os.c b/LuaJIT-2.1.0-beta3/src/lib_os.c
index 9e78d49ac..959dff883 100644
--- a/LuaJIT-2.1.0-beta3/src/lib_os.c
+++ b/LuaJIT-2.1.0-beta3/src/lib_os.c
@@ -76,7 +76,7 @@ LJLIB_CF(os_rename)

 LJLIB_CF(os_tmpname)
 {
-#if LJ_TARGET_PS3 || LJ_TARGET_PS4 || LJ_TARGET_PSVITA
+#if LJ_TARGET_PS3 || LJ_TARGET_PS4 || LJ_TARGET_PSVITA || LJ_TARGET_NX
   lj_err_caller(L, LJ_ERR_OSUNIQF);
   return 0;
 #else
diff --git a/LuaJIT-2.1.0-beta3/src/lj_alloc.c b/LuaJIT-2.1.0-beta3/src/lj_alloc.c
index 95d15d046..3eb388c55 100644
--- a/LuaJIT-2.1.0-beta3/src/lj_alloc.c
+++ b/LuaJIT-2.1.0-beta3/src/lj_alloc.c
@@ -36,7 +36,7 @@
 #ifndef LUAJIT_USE_SYSMALLOC

 #define MAX_SIZE_T     (~(size_t)0)
-#define MALLOC_ALIGNMENT   ((size_t)8U)
+#define MALLOC_ALIGNMENT  ((size_t)16U)

 #define DEFAULT_GRANULARITY   ((size_t)128U * (size_t)1024U)
 #define DEFAULT_TRIM_THRESHOLD   ((size_t)2U * (size_t)1024U * (size_t)1024U)
diff --git a/LuaJIT-2.1.0-beta3/src/lj_obj.h b/LuaJIT-2.1.0-beta3/src/lj_obj.h
index 52372c3e7..928e83936 100644
--- a/LuaJIT-2.1.0-beta3/src/lj_obj.h
+++ b/LuaJIT-2.1.0-beta3/src/lj_obj.h
@@ -316,15 +316,24 @@ typedef struct GCstr {

 /* -- Userdata object ----------------------------------------------------- */

+#if defined(__GNUC__)
+#define DM_ALIGNED(a) __attribute__ ((aligned (a)))
+#elif defined(_MSC_VER)
+#define DM_ALIGNED(a) __declspec(align(a))
+#else
+#error "Unsupported compiler"
+#endif
+
 /* Userdata object. Payload follows. */
-typedef struct GCudata {
+typedef struct DM_ALIGNED(16) GCudata {
   GCHeader;
   uint8_t udtype; /* Userdata type. */
   uint8_t unused2;
   GCRef env;      /* Should be at same offset in GCfunc. */
   MSize len;      /* Size of payload. */
   GCRef metatable;   /* Must be at same offset in GCtab. */
-  uint32_t align1; /* To force 8 byte alignment of the payload. */
+  uint32_t align0; /* To force 16 byte alignment of the payload. */
+  uint64_t align1; /* ^ */
 } GCudata;

 /* Userdata types. */
