#! /usr/bin/env python

srcdir = '.'
blddir = 'build'

APPNAME='bullet'
VERSION='2.77'

import os, sys, shutil
import waf_dynamo
import run

def options(opt):
    opt.load('waf_dynamo')

def configure(conf):
    conf.load('waf_dynamo')

    conf.env.append_unique('DEFINES', 'NDEBUG')

def build(bld):

    name = '%s-%s' % (APPNAME, VERSION)
    packagedir = 'package/%s/src' % name

    path = '%s/BulletCollision' % packagedir
    bullet_collision = bld.stlib(features = 'cxx',
                                defines = ['NDEBUG'],
                                includes = '. .. ./package/%s/src' % name,
                                target = 'BulletCollision',
                                source = bld.path.ant_glob(['%s/BroadphaseCollision/**/*.cpp' % path,
                                                            '%s/CollisionShapes/**/*.cpp' % path,
                                                            '%s/CollisionDispatch/**/*.cpp' % path,
                                                            '%s/Gimpact/**/*.cpp' % path,
                                                            '%s/NarrowPhaseCollision/**/*.cpp' % path]))

    path = '%s/BulletDynamics' % packagedir
    bullet_dynamics = bld.stlib(features = 'cxx',
                                defines = ['NDEBUG'],
                                includes = '. .. ./package/%s/src' % name,
                                target = 'BulletDynamics',
                                source = bld.path.ant_glob(['%s/Character/*.cpp' % path,
                                                            '%s/ConstraintSolver/*.cpp' % path,
                                                            '%s/Dynamics/*.cpp' % path,
                                                            '%s/Vehicle/*.cpp' % path]))

    path = '%s/LinearMath' % packagedir
    linear_math = bld.stlib(features = 'cxx',
                                   defines = ['NDEBUG'],
                                   includes = '. .. ./package/%s/src' % name,
                                   target = 'LinearMath',
                                   source = bld.path.ant_glob(['%s/*.cpp' % path]))

    # for android
    linear_math.env.append_unique('CXXFLAGS', "-Wno-c++11-narrowing")

    bld.add_group()

    install_dir = bld.path.make_node('install')
    install_dir.mkdir()
    product_dir = install_dir.make_node('%s-%s' % (APPNAME, VERSION))
    product_dir.mkdir()
    lib_dir = product_dir.make_node('lib')
    lib_dir.mkdir()
    include_dir = product_dir.make_node('include')
    include_dir.mkdir()
    platform_dir = lib_dir.make_node(bld.env.PLATFORM)
    platform_dir.mkdir()

    def copy(name, srcdir, dstdir):
        src = os.path.join(srcdir, name)
        dst = os.path.join(dstdir, name)
        shutil.copy2(src, dst)
        print("Copied %s to %s" % (src, dst))

    copy(bld.env.cxxstlib_PATTERN % 'BulletCollision', 'build', platform_dir.abspath())
    copy(bld.env.cxxstlib_PATTERN % 'BulletDynamics', 'build', platform_dir.abspath())
    copy(bld.env.cxxstlib_PATTERN % 'LinearMath', 'build', platform_dir.abspath())

    tar_name = '%s/%s-%s-%s.tar.gz' % (install_dir.abspath(), APPNAME, VERSION, bld.env.PLATFORM)
    run.command(['tar', 'czvf', tar_name, 'lib'], cwd=product_dir.abspath())
    print("Wrote %s" % tar_name)

    package_node = bld.path.make_node('package')
    product_node = package_node.make_node('%s-%s' % (APPNAME, VERSION))
    src_node = product_node.make_node('src')

    includes = src_node.ant_glob(['**/*.h'])
    for x in includes:
        relpath = os.path.relpath(x.abspath(), src_node.abspath())
        dst = os.path.join(include_dir.abspath(), relpath)
        dst_dir = os.path.dirname(dst)
        if not os.path.exists(dst_dir):
            os.makedirs(dst_dir)
        
        shutil.copy2(x.abspath(), dst)

    tar_name = '%s/%s-%s-%s.tar.gz' % (install_dir.abspath(), APPNAME, VERSION, 'common')
    run.command(['tar', 'czvf', tar_name, 'include'], cwd=product_dir.abspath())
    print("Wrote %s" % tar_name)
