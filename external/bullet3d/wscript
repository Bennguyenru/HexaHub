#! /usr/bin/env python

srcdir = '.'
blddir = 'build'

APPNAME='bullet'
VERSION='2.77'

import os, sys, re
import waf_dynamo

sys.path.append("..")

def init(ctx):
    pass

def options(opt):
    opt.load('waf_dynamo')

def configure(conf):
    conf.load('waf_dynamo')
    conf.env.append_unique('DEFINES', 'NDEBUG')

def build(bld):

    name = '%s-%s' % (APPNAME, VERSION)
    packagedir = 'package/%s/src' % name

    path = '%s/BulletCollision' % packagedir
    bullet_collision = bld.stlib(features = 'cxx',
                                 defines = ['NDEBUG'],
                                 includes = '. .. ./package/%s/src' % name,
                                 target = 'BulletCollision',
                                 source = bld.path.ant_glob(['%s/BroadphaseCollision/*.cpp' % path,
                                                            '%s/CollisionShapes/*.cpp' % path,
                                                            '%s/CollisionDispatch/*.cpp' % path,
                                                            '%s/Gimpact/*.cpp' % path,
                                                            '%s/NarrowPhaseCollision/*.cpp' % path]))
    bullet_collision.install_path = None
    path = '%s/BulletDynamics' % packagedir
    bullet_dynamics = bld.stlib(features = 'cxx',
                                defines = ['NDEBUG'],
                                includes = '. .. ./package/%s/src' % name,
                                target = 'BulletDynamics',
                                source = bld.path.ant_glob(['%s/Character/*.cpp' % path,
                                                            '%s/ConstraintSolver/*.cpp' % path,
                                                            '%s/Dynamics/*.cpp' % path,
                                                            '%s/Vehicle/*.cpp' % path]))
    bullet_dynamics.install_path = None

    linear_math = bld.stlib(features = 'cxx',
                            defines = ['NDEBUG'],
                            includes = '. .. ./package/%s/src' % name,
                            target = 'LinearMath',
                            source = bld.path.ant_glob('%s/LinearMath/*.cpp' % packagedir))
    linear_math.install_path = None

    # for android
    linear_math.env.append_unique('CXXFLAGS', "-Wno-c++11-narrowing")
    bld.install_files('${PREFIX}/%s-%s/lib/%s/' % (APPNAME, VERSION, bld.env.PLATFORM), bld.env.cstlib_PATTERN % 'BulletCollision')
    bld.install_files('${PREFIX}/%s-%s/lib/%s/' % (APPNAME, VERSION, bld.env.PLATFORM), bld.env.cstlib_PATTERN % 'BulletDynamics')
    bld.install_files('${PREFIX}/%s-%s/lib/%s/' % (APPNAME, VERSION, bld.env.PLATFORM), bld.env.cstlib_PATTERN % 'LinearMath')
    bld.install_files('${PREFIX}/%s-%s/include' % (APPNAME, VERSION), bld.path.ant_glob(['**/*.h']), cwd=bld.path.find_dir(packagedir), relative_trick=True)

def package(conf):
    # TODO: Check how much of this can be moved to waf_package.py

    env = waf_package.load_build_context(blddir)
    cwd = os.path.join(env.PREFIX, "%s-%s" % (APPNAME, VERSION)).replace('\\', '/')

    files = waf_package.glob_files("include/**/*", cwd=cwd)
    files.extend(waf_package.glob_files("include/*", cwd=cwd))
    target = os.path.join(env.PREFIX, "%s-%s-%s.tar.gz" % (APPNAME, VERSION, "common"))
    waf_package.create_tar(files, cwd, target=target)
    print("Wrote", target)

    files = waf_package.glob_files(["bin/%s/*" % env.PLATFORM,
                                    "bin/%s/**/*" % env.PLATFORM,
                                    "lib/%s/*" % env.PLATFORM,
                                    "lib/%s/**/*" % env.PLATFORM],
                                    cwd=cwd)

    target = os.path.join(env.PREFIX, "%s-%s-%s.tar.gz" % (APPNAME, VERSION, env.PLATFORM))
    waf_package.create_tar(files, cwd, target=target)

    print("Wrote", target)
