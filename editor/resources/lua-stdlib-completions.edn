{""
 [{:name "assert", :display-string "assert ([v] [, message])", :doc ""}
  {:name "collectgarbage",
   :display-string "collectgarbage ([opt] [, arg]])",
   :doc ""}
  {:name "dofile", :display-string "dofile ([filename])", :doc ""}
  {:name "error", :display-string "error ([message] [, level])", :doc ""}
  {:name "_G", :display-string "_G", :doc ""}
  {:name "getfenv", :display-string "getfenv ([f])", :doc ""}
  {:name "getmetatable",
   :display-string "getmetatable ([object])",
   :doc ""}
  {:name "ipairs", :display-string "ipairs ([t])", :doc ""}
  {:name "load", :display-string "load ([func] [, chunkname])", :doc ""}
  {:name "loadfile", :display-string "loadfile ([filename])", :doc ""}
  {:name "loadstring",
   :display-string "loadstring ([string] [, chunkname])",
   :doc ""}
  {:name "next", :display-string "next ([table] [, index])", :doc ""}
  {:name "pairs", :display-string "pairs ([t])", :doc ""}
  {:name "pcall", :display-string "pcall ([f], [arg1], ···)", :doc ""}
  {:name "print", :display-string "print (···)", :doc ""}
  {:name "rawequal", :display-string "rawequal ([v1], [v2])", :doc ""}
  {:name "rawget", :display-string "rawget ([table], [index])", :doc ""}
  {:name "rawset",
   :display-string "rawset ([table], [index], [value])",
   :doc ""}
  {:name "select", :display-string "select ([index], ···)", :doc ""}
  {:name "setfenv", :display-string "setfenv ([f],[table])", :doc ""}
  {:name "setmetatable",
   :display-string "setmetatable ([table], [metatable])",
   :doc ""}
  {:name "tonumber", :display-string "tonumber ([e] [, base])", :doc ""}
  {:name "tostring", :display-string "tostring ([e])", :doc ""}
  {:name "type", :display-string "type ([v])", :doc ""}
  {:name "unpack",
   :display-string "unpack ([list] [, i [, j]])",
   :doc ""}
  {:name "_VERSION", :display-string "_VERSION", :doc ""}
  {:name "xpcall", :display-string "xpcall ([f], [err])", :doc ""}
  {:name "module", :display-string "module ([name] [, ···])", :doc ""}
  {:name "require", :display-string "require ([modname])", :doc ""}],
 "table"
 [{:name "table.concat",
   :display-string "table.concat ([table] [, sep [, i [, j]]])",
   :doc ""}
  {:name "table.insert",
   :display-string "table.insert ([table], [pos,] value)",
   :doc ""}
  {:name "table.maxn", :display-string "table.maxn ([table])", :doc ""}
  {:name "table.remove",
   :display-string "table.remove ([table] [, pos])",
   :doc ""}
  {:name "table.sort",
   :display-string "table.sort ([table] [, comp])",
   :doc ""}],
 "package"
 [{:name "package.cpath", :display-string "package.cpath", :doc ""}
  {:name "package.loaded", :display-string "package.loaded", :doc ""}
  {:name "package.loaders", :display-string "package.loaders", :doc ""}
  {:name "package.loadlib",
   :display-string "package.loadlib ([libname], [funcname])",
   :doc ""}
  {:name "package.path", :display-string "package.path", :doc ""}
  {:name "package.preload", :display-string "package.preload", :doc ""}
  {:name "package.seeall",
   :display-string "package.seeall ([module])",
   :doc ""}],
 "string"
 [{:name "string.byte",
   :display-string "string.byte ([s] [, i [, j]])",
   :doc ""}
  {:name "string.char", :display-string "string.char (···)", :doc ""}
  {:name "string.dump",
   :display-string "string.dump ([function])",
   :doc ""}
  {:name "string.find",
   :display-string "string.find ([s], [pattern] [, init [, plain]])",
   :doc ""}
  {:name "string.format",
   :display-string "string.format ([formatstring], ···)",
   :doc ""}
  {:name "string.gmatch",
   :display-string "string.gmatch ([s], [pattern])",
   :doc ""}
  {:name "string.gsub",
   :display-string "string.gsub ([s], [pattern], [repl] [, n])",
   :doc ""}
  {:name "string.len", :display-string "string.len ([s])", :doc ""}
  {:name "string.lower", :display-string "string.lower ([s])", :doc ""}
  {:name "string.match",
   :display-string "string.match ([s], [pattern] [, init])",
   :doc ""}
  {:name "string.rep", :display-string "string.rep ([s],[n])", :doc ""}
  {:name "string.reverse",
   :display-string "string.reverse ([s])",
   :doc ""}
  {:name "string.sub",
   :display-string "string.sub ([s], [i] [, j])",
   :doc ""}
  {:name "string.upper", :display-string "string.upper ([s])", :doc ""}],
 "coroutine"
 [{:name "coroutine.create",
   :display-string "coroutine.create ([f])",
   :doc ""}
  {:name "coroutine.resume",
   :display-string "coroutine.resume ([co] [, val1, ···])",
   :doc ""}
  {:name "coroutine.running",
   :display-string "coroutine.running ()",
   :doc ""}
  {:name "coroutine.status",
   :display-string "coroutine.status ([co])",
   :doc ""}
  {:name "coroutine.wrap",
   :display-string "coroutine.wrap ([f])",
   :doc ""}
  {:name "coroutine.yield",
   :display-string "coroutine.yield (···)",
   :doc ""}],
 "os"
 [{:name "os.clock", :display-string "os.clock ()", :doc ""}
  {:name "os.date",
   :display-string "os.date ([format [, time]])",
   :doc ""}
  {:name "os.difftime",
   :display-string "os.difftime ([t2], [t1])",
   :doc ""}
  {:name "os.execute",
   :display-string "os.execute ([command])",
   :doc ""}
  {:name "os.exit", :display-string "os.exit ([code])", :doc ""}
  {:name "os.getenv", :display-string "os.getenv ([varname])", :doc ""}
  {:name "os.remove", :display-string "os.remove ([filename])", :doc ""}
  {:name "os.rename",
   :display-string "os.rename ([oldname], [newname])",
   :doc ""}
  {:name "os.setlocale",
   :display-string "os.setlocale ([locale] [, category])",
   :doc ""}
  {:name "os.time", :display-string "os.time ([table])", :doc ""}
  {:name "os.tmpname", :display-string "os.tmpname ()", :doc ""}],
 "io"
 [{:name "io.close", :display-string "io.close ([file])", :doc ""}
  {:name "io.flush", :display-string "io.flush ()", :doc ""}
  {:name "io.input", :display-string "io.input ([file])", :doc ""}
  {:name "io.lines", :display-string "io.lines ([filename])", :doc ""}
  {:name "io.open",
   :display-string "io.open (filename [, mode])",
   :doc ""}
  {:name "io.output", :display-string "io.output ([file])", :doc ""}
  {:name "io.popen",
   :display-string "io.popen ([prog] [, mode])",
   :doc ""}
  {:name "io.read", :display-string "io.read (···)", :doc ""}
  {:name "io.tmpfile", :display-string "io.tmpfile ()", :doc ""}
  {:name "io.type", :display-string "io.type ([obj])", :doc ""}
  {:name "io.write", :display-string "io.write (···)", :doc ""}],
 "math"
 [{:name "math.abs", :display-string "math.abs ([x])", :doc ""}
  {:name "math.acos", :display-string "math.acos ([x])", :doc ""}
  {:name "math.asin", :display-string "math.asin ([x])", :doc ""}
  {:name "math.atan", :display-string "math.atan ([x])", :doc ""}
  {:name "math.atan2", :display-string "math.atan2 ([y], [x])", :doc ""}
  {:name "math.ceil", :display-string "math.ceil ([x])", :doc ""}
  {:name "math.cos", :display-string "math.cos ([x])", :doc ""}
  {:name "math.cosh", :display-string "math.cosh ([x])", :doc ""}
  {:name "math.deg", :display-string "math.deg ([x])", :doc ""}
  {:name "math.exp", :display-string "math.exp ([x])", :doc ""}
  {:name "math.floor", :display-string "math.floor ([x])", :doc ""}
  {:name "math.fmod", :display-string "math.fmod ([x],[y])", :doc ""}
  {:name "math.frexp", :display-string "math.frexp ([x])", :doc ""}
  {:name "math.huge", :display-string "math.huge", :doc ""}
  {:name "math.ldexp", :display-string "math.ldexp (m, e)", :doc ""}
  {:name "math.log", :display-string "math.log ([x])", :doc ""}
  {:name "math.log10", :display-string "math.log10 ([x])", :doc ""}
  {:name "math.max", :display-string "math.max ([x], ···)", :doc ""}
  {:name "math.min", :display-string "math.min ([x], ···)", :doc ""}
  {:name "math.modf", :display-string "math.modf ([x])", :doc ""}
  {:name "math.pi", :display-string "math.pi", :doc ""}
  {:name "math.pow", :display-string "math.pow ([x], [y])", :doc ""}
  {:name "math.rad", :display-string "math.rad ([x])", :doc ""}
  {:name "math.random",
   :display-string "math.random ([m [, n]])",
   :doc ""}
  {:name "math.randomseed",
   :display-string "math.randomseed ([x])",
   :doc ""}
  {:name "math.sin", :display-string "math.sin ([x])", :doc ""}
  {:name "math.sinh", :display-string "math.sinh ([x])", :doc ""}
  {:name "math.sqrt", :display-string "math.sqrt ([x])", :doc ""}
  {:name "math.tan", :display-string "math.tan ([x])", :doc ""}
  {:name "math.tanh", :display-string "math.tanh ([x])", :doc ""}],
 "debug"
 [{:name "debug.debug", :display-string "debug.debug ()", :doc ""}
  {:name "debug.getfenv", :display-string "debug.getfenv ([o])", :doc ""}
  {:name "debug.gethook",
   :display-string "debug.gethook ([thread])",
   :doc ""}
  {:name "debug.getinfo",
   :display-string "debug.getinfo ([thread,] [function] [, what])",
   :doc ""}
  {:name "debug.getlocal",
   :display-string "debug.getlocal ([thread,] [level], [local])",
   :doc ""}
  {:name "debug.getmetatable",
   :display-string "debug.getmetatable ([object])",
   :doc ""}
  {:name "debug.getregistry",
   :display-string "debug.getregistry ()",
   :doc ""}
  {:name "debug.getupvalue",
   :display-string "debug.getupvalue ([func], [up])",
   :doc ""}
  {:name "debug.setfenv",
   :display-string "debug.setfenv ([object], [table])",
   :doc ""}
  {:name "debug.sethook",
   :display-string "debug.sethook ([thread,] [hook], [mask] [, count])",
   :doc ""}
  {:name "debug.setlocal",
   :display-string "debug.setlocal ([thread,] [level], [local], [value])",
   :doc ""}
  {:name "debug.setmetatable",
   :display-string "debug.setmetatable ([object], [table])",
   :doc ""}
  {:name "debug.setupvalue",
   :display-string "debug.setupvalue ([func], [up], [value])",
   :doc ""}
  {:name "debug.traceback",
   :display-string "debug.traceback ([thread,] [message [, level]])",
   :doc ""}]}
