;; joker.core is easiest place to put fully namespace qualified symbols for
;; joker to understand them.
(ns joker.core)

(def clojure.core.protocols.CollReduce)
(def clojure.core.protocols.IKVReduce)
(def internal.node.NodeImpl)
(def schema.core.Predicate)
(def internal.node.NodeTypeRef)
(def internal.node.ValueTypeRef)
(def javafx.stage.Stage)
(def javafx.scene.control.Tab)
(def javafx.stage.Window)
(def javafx.scene.input.KeyCodeCombination)
(def javafx.scene.input.KeyCharacterCombination)
(def schema.utils.ValidationError)
(def editor.gl.vertex2.VertexBuffer)
(def org.eclipse.jgit.transport.UsernamePasswordCredentialsProvider)
(defmacro deftest [& shut-up])
(defmacro is [& quiet-please])
(defmacro testing [& yawn])
(defmacro use-fixtures [& _])

;; Other symbols it misses (for example generated by macros) we put in the
;; correct namespace so that we don't hide errors somewhere else.

(ns benchmark.graph-benchmark)

(def world)

(ns clojure.set)

(def map-invert)

(ns editor.atlas)

(def pos-uv-vert)
(def pos-uv-frag)
(def ->texture-vtx)

(ns editor.code.data)
;; This is not great. Don't know why joker does not know about the proxy form.
(def dest-buffer)
(def dest-offset)
(def length)

(ns editor.collada-scene)

(def shader-ver-pos-nrm-tex)
(def shader-frag-pos-nrm-tex)
(def model-id-vertex-shader)
(def model-id-fragment-shader)
(def ->vtx-pos-nrm-tex)

(ns editor.collision-object)

(def ->color-vtx)
(def vertex-shader)
(def fragment-shader)
(def shape-id-vertex-shader)
(def shape-id-fragment-shader)

(ns editor.cubemap)

(def ->normal-vtx)
(def pos-norm-vert)
(def pos-norm-frag)

(ns editor.curve-view)

(def line-vertex-shader)
(def line-fragment-shader)
(def ->color-vtx)

(ns editor.font)

(def ->DefoldVertex)
(def ->DFVertex)

(ns editor.gl)

(def gl-context)

(ns editor.gl.pass)

(def selection-passes)
(def render-passes)

(ns editor.gl.shader)

(defmacro defshader [name & body])

(ns editor.gui)

(def vertex-shader)
(def fragment-shader)
(def gui-id-vertex-shader)
(def gui-id-fragment-shader)
(def line-vertex-shader)
(def line-fragment-shader)
(def ->color-vtx-vb)
(def color-vtx-put!)
(def uv-color-vtx-put!)
(def ->color-vtx)
(def ->uv-color-vtx)

(ns editor.label)

(def vertex-shader)
(def fragment-shader)
(def line-vertex-shader)
(def line-fragment-shader)
(def label-id-vertex-shader)
(def label-id-fragment-shader)
(def color-vtx-put!)
(def ->color-vtx)

(ns editor.particlefx)

(def line-vertex-shader)
(def line-fragment-shader)
(def line-id-vertex-shader)
(def line-id-fragment-shader)
(def ->color-vtx)

(ns editor.render)

(def shader-ver-tex-col)
(def shader-frag-tex-tint)
(def shader-ver-outline)
(def shader-frag-outline)
(def ->vtx-pos-col)

(ns editor.rulers)

(def tex-vertex-shader)
(def tex-fragment-shader)
(def color-uv-vtx-put!)
(def ->color-uv-vtx)

(ns editor.scene-tools)

(def vertex-shader)
(def fragment-shader)
(def ->pos-vtx)

(ns editor.sprite)

(def vertex-shader)
(def fragment-shader)
(def outline-vertex-shader)
(def outline-fragment-shader)
(def ->texture-vtx)
(def ->color-vtx)
(def sprite-id-vertex-shader)
(def sprite-id-fragment-shader)

(ns editor.spine)

(def spine-id-vertex-shader)
(def spine-id-fragment-shader)

(ns editor.tile-map)

(def tile-map-id-vertex-shader)
(def tile-map-id-fragment-shader)
(def pos-uv-vert)
(def pos-uv-frag)
(def ->pos-uv-vtx)
(def pos-uv-vtx-put!)
(def pos-color-vert)
(def pos-color-frag)
(def ->color-vtx)
(def color-vtx-put!)

(ns editor.tile-source)

(def pos-uv-vert)
(def pos-uv-frag)
(def pos-color-vert)
(def pos-color-frag)
(def ->pos-uv-vtx)
(def ->pos-color-vtx)

(ns editor.ui)

;; This is not great. Don't know why joker does not know about the proxy form.
(def now)

(ns editor.system)

(def defold-engine-sha1)

(ns util.profiler-test)

(def threads)

;; Not a real namespace. Making this up to stop warnings about undefined symbols
;; that are actually Java fields.
(ns com.sun.javafx.css.StyleManager)

(def getInstance)

(ns javafx.application.Platform)

(def exit)

(ns javafx.scene.Cursor)

(def DEFAULT)
(def HAND)
(def TEXT)
(def DISAPPEAR)

(ns Thread$State)

(def TERMINATED)

